// This file was GENERATED by command:
//     pump.py gmock-generated-matchers.h.pump
// DO NOT EDIT BY HAND!!!

// Copyright 2008, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Google Mock - a framework for writing C++ mock classes.
//
// This file implements some commonly used variadic matchers.

#ifndef GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_MATCHERS_H_
#define GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_MATCHERS_H_

#include <iterator>
#include <sstream>
#include <string>
#include <vector>
#include "gmock/gmock-matchers.h"

namespace testing {
namespace internal {

// The type of the i-th (0-based) field of Tuple.
#define GMOCK_FIELD_TYPE_(Tuple, i) \
    typename ::testing::tuple_element<i, Tuple>::type

// TupleFields<Tuple, k0, ..., kn> is for selecting fields from a
// tuple of type Tuple.  It has two members:
//
//   type: a tuple type whose i-th field is the ki-th field of Tuple.
//   GetSelectedFields(t): returns fields k0, ..., and kn of t as a tuple.
//
// For example, in class TupleFields<tuple<bool, char, int>, 2, 0>, we have:
//
//   type is tuple<int, bool>, and
//   GetSelectedFields(make_tuple(true, 'a', 42)) is (42, true).

template <class Tuple, int k0 = -1, int k1 = -1, int k2 = -1, int k3 = -1,
    int k4 = -1, int k5 = -1, int k6 = -1, int k7 = -1, int k8 = -1,
    int k9 = -1, int k10 = -1, int k11 = -1, int k12 = -1, int k13 = -1,
    int k14 = -1, int k15 = -1, int k16 = -1, int k17 = -1, int k18 = -1,
    int k19 = -1, int k20 = -1, int k21 = -1, int k22 = -1, int k23 = -1,
    int k24 = -1, int k25 = -1, int k26 = -1, int k27 = -1, int k28 = -1,
    int k29 = -1, int k30 = -1, int k31 = -1, int k32 = -1, int k33 = -1,
    int k34 = -1, int k35 = -1, int k36 = -1, int k37 = -1, int k38 = -1,
    int k39 = -1>
class TupleFields;

// This generic version is used when there are 40 selectors.
template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30,
    int k31, int k32, int k33, int k34, int k35, int k36, int k37, int k38,
    int k39>
class TupleFields {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30),
      GMOCK_FIELD_TYPE_(Tuple, k31), GMOCK_FIELD_TYPE_(Tuple, k32),
      GMOCK_FIELD_TYPE_(Tuple, k33), GMOCK_FIELD_TYPE_(Tuple, k34),
      GMOCK_FIELD_TYPE_(Tuple, k35), GMOCK_FIELD_TYPE_(Tuple, k36),
      GMOCK_FIELD_TYPE_(Tuple, k37), GMOCK_FIELD_TYPE_(Tuple, k38),
      GMOCK_FIELD_TYPE_(Tuple, k39)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t), get<k31>(t), get<k32>(t), get<k33>(t), get<k34>(t),
        get<k35>(t), get<k36>(t), get<k37>(t), get<k38>(t), get<k39>(t));
  }
};

// The following specialization is used for 0 ~ 39 selectors.

template <class Tuple>
class TupleFields<Tuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<> type;
  static type GetSelectedFields(const Tuple& /* t */) {
    return type();
  }
};

template <class Tuple, int k0>
class TupleFields<Tuple, k0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t));
  }
};

template <class Tuple, int k0, int k1>
class TupleFields<Tuple, k0, k1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t));
  }
};

template <class Tuple, int k0, int k1, int k2>
class TupleFields<Tuple, k0, k1, k2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3>
class TupleFields<Tuple, k0, k1, k2, k3, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4>
class TupleFields<Tuple, k0, k1, k2, k3, k4, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, k30, -1, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30,
    int k31>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, k30, k31, -1, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30),
      GMOCK_FIELD_TYPE_(Tuple, k31)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t), get<k31>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30,
    int k31, int k32>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, k30, k31, k32, -1, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30),
      GMOCK_FIELD_TYPE_(Tuple, k31), GMOCK_FIELD_TYPE_(Tuple, k32)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t), get<k31>(t), get<k32>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30,
    int k31, int k32, int k33>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, k30, k31, k32, k33, -1, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30),
      GMOCK_FIELD_TYPE_(Tuple, k31), GMOCK_FIELD_TYPE_(Tuple, k32),
      GMOCK_FIELD_TYPE_(Tuple, k33)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t), get<k31>(t), get<k32>(t), get<k33>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30,
    int k31, int k32, int k33, int k34>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, k30, k31, k32, k33, k34, -1, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30),
      GMOCK_FIELD_TYPE_(Tuple, k31), GMOCK_FIELD_TYPE_(Tuple, k32),
      GMOCK_FIELD_TYPE_(Tuple, k33), GMOCK_FIELD_TYPE_(Tuple, k34)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t), get<k31>(t), get<k32>(t), get<k33>(t), get<k34>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30,
    int k31, int k32, int k33, int k34, int k35>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, k30, k31, k32, k33, k34, k35, -1, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30),
      GMOCK_FIELD_TYPE_(Tuple, k31), GMOCK_FIELD_TYPE_(Tuple, k32),
      GMOCK_FIELD_TYPE_(Tuple, k33), GMOCK_FIELD_TYPE_(Tuple, k34),
      GMOCK_FIELD_TYPE_(Tuple, k35)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t), get<k31>(t), get<k32>(t), get<k33>(t), get<k34>(t),
        get<k35>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30,
    int k31, int k32, int k33, int k34, int k35, int k36>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, k30, k31, k32, k33, k34, k35, k36, -1, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30),
      GMOCK_FIELD_TYPE_(Tuple, k31), GMOCK_FIELD_TYPE_(Tuple, k32),
      GMOCK_FIELD_TYPE_(Tuple, k33), GMOCK_FIELD_TYPE_(Tuple, k34),
      GMOCK_FIELD_TYPE_(Tuple, k35), GMOCK_FIELD_TYPE_(Tuple, k36)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t), get<k31>(t), get<k32>(t), get<k33>(t), get<k34>(t),
        get<k35>(t), get<k36>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30,
    int k31, int k32, int k33, int k34, int k35, int k36, int k37>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, -1, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30),
      GMOCK_FIELD_TYPE_(Tuple, k31), GMOCK_FIELD_TYPE_(Tuple, k32),
      GMOCK_FIELD_TYPE_(Tuple, k33), GMOCK_FIELD_TYPE_(Tuple, k34),
      GMOCK_FIELD_TYPE_(Tuple, k35), GMOCK_FIELD_TYPE_(Tuple, k36),
      GMOCK_FIELD_TYPE_(Tuple, k37)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t), get<k31>(t), get<k32>(t), get<k33>(t), get<k34>(t),
        get<k35>(t), get<k36>(t), get<k37>(t));
  }
};

template <class Tuple, int k0, int k1, int k2, int k3, int k4, int k5, int k6,
    int k7, int k8, int k9, int k10, int k11, int k12, int k13, int k14,
    int k15, int k16, int k17, int k18, int k19, int k20, int k21, int k22,
    int k23, int k24, int k25, int k26, int k27, int k28, int k29, int k30,
    int k31, int k32, int k33, int k34, int k35, int k36, int k37, int k38>
class TupleFields<Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
    k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27,
    k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, -1> {
 public:
  typedef ::testing::tuple<GMOCK_FIELD_TYPE_(Tuple, k0),
      GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2),
      GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4),
      GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6),
      GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8),
      GMOCK_FIELD_TYPE_(Tuple, k9), GMOCK_FIELD_TYPE_(Tuple, k10),
      GMOCK_FIELD_TYPE_(Tuple, k11), GMOCK_FIELD_TYPE_(Tuple, k12),
      GMOCK_FIELD_TYPE_(Tuple, k13), GMOCK_FIELD_TYPE_(Tuple, k14),
      GMOCK_FIELD_TYPE_(Tuple, k15), GMOCK_FIELD_TYPE_(Tuple, k16),
      GMOCK_FIELD_TYPE_(Tuple, k17), GMOCK_FIELD_TYPE_(Tuple, k18),
      GMOCK_FIELD_TYPE_(Tuple, k19), GMOCK_FIELD_TYPE_(Tuple, k20),
      GMOCK_FIELD_TYPE_(Tuple, k21), GMOCK_FIELD_TYPE_(Tuple, k22),
      GMOCK_FIELD_TYPE_(Tuple, k23), GMOCK_FIELD_TYPE_(Tuple, k24),
      GMOCK_FIELD_TYPE_(Tuple, k25), GMOCK_FIELD_TYPE_(Tuple, k26),
      GMOCK_FIELD_TYPE_(Tuple, k27), GMOCK_FIELD_TYPE_(Tuple, k28),
      GMOCK_FIELD_TYPE_(Tuple, k29), GMOCK_FIELD_TYPE_(Tuple, k30),
      GMOCK_FIELD_TYPE_(Tuple, k31), GMOCK_FIELD_TYPE_(Tuple, k32),
      GMOCK_FIELD_TYPE_(Tuple, k33), GMOCK_FIELD_TYPE_(Tuple, k34),
      GMOCK_FIELD_TYPE_(Tuple, k35), GMOCK_FIELD_TYPE_(Tuple, k36),
      GMOCK_FIELD_TYPE_(Tuple, k37), GMOCK_FIELD_TYPE_(Tuple, k38)> type;
  static type GetSelectedFields(const Tuple& t) {
    return type(get<k0>(t), get<k1>(t), get<k2>(t), get<k3>(t), get<k4>(t),
        get<k5>(t), get<k6>(t), get<k7>(t), get<k8>(t), get<k9>(t),
        get<k10>(t), get<k11>(t), get<k12>(t), get<k13>(t), get<k14>(t),
        get<k15>(t), get<k16>(t), get<k17>(t), get<k18>(t), get<k19>(t),
        get<k20>(t), get<k21>(t), get<k22>(t), get<k23>(t), get<k24>(t),
        get<k25>(t), get<k26>(t), get<k27>(t), get<k28>(t), get<k29>(t),
        get<k30>(t), get<k31>(t), get<k32>(t), get<k33>(t), get<k34>(t),
        get<k35>(t), get<k36>(t), get<k37>(t), get<k38>(t));
  }
};

#undef GMOCK_FIELD_TYPE_

// Implements the Args() matcher.
template <class ArgsTuple, int k0 = -1, int k1 = -1, int k2 = -1, int k3 = -1,
    int k4 = -1, int k5 = -1, int k6 = -1, int k7 = -1, int k8 = -1,
    int k9 = -1, int k10 = -1, int k11 = -1, int k12 = -1, int k13 = -1,
    int k14 = -1, int k15 = -1, int k16 = -1, int k17 = -1, int k18 = -1,
    int k19 = -1, int k20 = -1, int k21 = -1, int k22 = -1, int k23 = -1,
    int k24 = -1, int k25 = -1, int k26 = -1, int k27 = -1, int k28 = -1,
    int k29 = -1, int k30 = -1, int k31 = -1, int k32 = -1, int k33 = -1,
    int k34 = -1, int k35 = -1, int k36 = -1, int k37 = -1, int k38 = -1,
    int k39 = -1>
class ArgsMatcherImpl : public MatcherInterface<ArgsTuple> {
 public:
  // ArgsTuple may have top-level const or reference modifiers.
  typedef GTEST_REMOVE_REFERENCE_AND_CONST_(ArgsTuple) RawArgsTuple;
  typedef typename internal::TupleFields<RawArgsTuple, k0, k1, k2, k3, k4, k5,
      k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20,
      k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34,
      k35, k36, k37, k38, k39>::type SelectedArgs;
  typedef Matcher<const SelectedArgs&> MonomorphicInnerMatcher;

  template <typename InnerMatcher>
  explicit ArgsMatcherImpl(const InnerMatcher& inner_matcher)
      : inner_matcher_(SafeMatcherCast<const SelectedArgs&>(inner_matcher)) {}

  virtual bool MatchAndExplain(ArgsTuple args,
                               MatchResultListener* listener) const {
    const SelectedArgs& selected_args = GetSelectedArgs(args);
    if (!listener->IsInterested())
      return inner_matcher_.Matches(selected_args);

    PrintIndices(listener->stream());
    *listener << "are " << PrintToString(selected_args);

    StringMatchResultListener inner_listener;
    const bool match = inner_matcher_.MatchAndExplain(selected_args,
                                                      &inner_listener);
    PrintIfNotEmpty(inner_listener.str(), listener->stream());
    return match;
  }

  virtual void DescribeTo(::std::ostream* os) const {
    *os << "are a tuple ";
    PrintIndices(os);
    inner_matcher_.DescribeTo(os);
  }

  virtual void DescribeNegationTo(::std::ostream* os) const {
    *os << "are a tuple ";
    PrintIndices(os);
    inner_matcher_.DescribeNegationTo(os);
  }

 private:
  static SelectedArgs GetSelectedArgs(ArgsTuple args) {
    return TupleFields<RawArgsTuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9,
        k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
        k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37,
        k38, k39>::GetSelectedFields(args);
  }

  // Prints the indices of the selected fields.
  static void PrintIndices(::std::ostream* os) {
    *os << "whose fields (";
    const int indices[40] = { k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11,
        k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25,
        k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39 };
    for (int i = 0; i < 40; i++) {
      if (indices[i] < 0)
        break;

      if (i >= 1)
        *os << ", ";

      *os << "#" << indices[i];
    }
    *os << ") ";
  }

  const MonomorphicInnerMatcher inner_matcher_;

  GTEST_DISALLOW_ASSIGN_(ArgsMatcherImpl);
};

template <class InnerMatcher, int k0 = -1, int k1 = -1, int k2 = -1,
    int k3 = -1, int k4 = -1, int k5 = -1, int k6 = -1, int k7 = -1,
    int k8 = -1, int k9 = -1, int k10 = -1, int k11 = -1, int k12 = -1,
    int k13 = -1, int k14 = -1, int k15 = -1, int k16 = -1, int k17 = -1,
    int k18 = -1, int k19 = -1, int k20 = -1, int k21 = -1, int k22 = -1,
    int k23 = -1, int k24 = -1, int k25 = -1, int k26 = -1, int k27 = -1,
    int k28 = -1, int k29 = -1, int k30 = -1, int k31 = -1, int k32 = -1,
    int k33 = -1, int k34 = -1, int k35 = -1, int k36 = -1, int k37 = -1,
    int k38 = -1, int k39 = -1>
class ArgsMatcher {
 public:
  explicit ArgsMatcher(const InnerMatcher& inner_matcher)
      : inner_matcher_(inner_matcher) {}

  template <typename ArgsTuple>
  operator Matcher<ArgsTuple>() const {
    return MakeMatcher(new ArgsMatcherImpl<ArgsTuple, k0, k1, k2, k3, k4, k5,
        k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20,
        k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34,
        k35, k36, k37, k38, k39>(inner_matcher_));
  }

 private:
  const InnerMatcher inner_matcher_;

  GTEST_DISALLOW_ASSIGN_(ArgsMatcher);
};

// A set of metafunctions for computing the result type of AllOf.
// AllOf(m1, ..., mN) returns
// AllOfResultN<decltype(m1), ..., decltype(mN)>::type.

// Although AllOf isn't defined for one argument, AllOfResult1 is defined
// to simplify the implementation.
template <typename M1>
struct AllOfResult1 {
  typedef M1 type;
};

template <typename M1, typename M2>
struct AllOfResult2 {
  typedef BothOfMatcher<
      typename AllOfResult1<M1>::type,
      typename AllOfResult1<M2>::type
  > type;
};

template <typename M1, typename M2, typename M3>
struct AllOfResult3 {
  typedef BothOfMatcher<
      typename AllOfResult1<M1>::type,
      typename AllOfResult2<M2, M3>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4>
struct AllOfResult4 {
  typedef BothOfMatcher<
      typename AllOfResult2<M1, M2>::type,
      typename AllOfResult2<M3, M4>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5>
struct AllOfResult5 {
  typedef BothOfMatcher<
      typename AllOfResult2<M1, M2>::type,
      typename AllOfResult3<M3, M4, M5>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6>
struct AllOfResult6 {
  typedef BothOfMatcher<
      typename AllOfResult3<M1, M2, M3>::type,
      typename AllOfResult3<M4, M5, M6>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7>
struct AllOfResult7 {
  typedef BothOfMatcher<
      typename AllOfResult3<M1, M2, M3>::type,
      typename AllOfResult4<M4, M5, M6, M7>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8>
struct AllOfResult8 {
  typedef BothOfMatcher<
      typename AllOfResult4<M1, M2, M3, M4>::type,
      typename AllOfResult4<M5, M6, M7, M8>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9>
struct AllOfResult9 {
  typedef BothOfMatcher<
      typename AllOfResult4<M1, M2, M3, M4>::type,
      typename AllOfResult5<M5, M6, M7, M8, M9>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10>
struct AllOfResult10 {
  typedef BothOfMatcher<
      typename AllOfResult5<M1, M2, M3, M4, M5>::type,
      typename AllOfResult5<M6, M7, M8, M9, M10>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11>
struct AllOfResult11 {
  typedef BothOfMatcher<
      typename AllOfResult5<M1, M2, M3, M4, M5>::type,
      typename AllOfResult6<M6, M7, M8, M9, M10, M11>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12>
struct AllOfResult12 {
  typedef BothOfMatcher<
      typename AllOfResult6<M1, M2, M3, M4, M5, M6>::type,
      typename AllOfResult6<M7, M8, M9, M10, M11, M12>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13>
struct AllOfResult13 {
  typedef BothOfMatcher<
      typename AllOfResult6<M1, M2, M3, M4, M5, M6>::type,
      typename AllOfResult7<M7, M8, M9, M10, M11, M12, M13>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14>
struct AllOfResult14 {
  typedef BothOfMatcher<
      typename AllOfResult7<M1, M2, M3, M4, M5, M6, M7>::type,
      typename AllOfResult7<M8, M9, M10, M11, M12, M13, M14>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15>
struct AllOfResult15 {
  typedef BothOfMatcher<
      typename AllOfResult7<M1, M2, M3, M4, M5, M6, M7>::type,
      typename AllOfResult8<M8, M9, M10, M11, M12, M13, M14, M15>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16>
struct AllOfResult16 {
  typedef BothOfMatcher<
      typename AllOfResult8<M1, M2, M3, M4, M5, M6, M7, M8>::type,
      typename AllOfResult8<M9, M10, M11, M12, M13, M14, M15, M16>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17>
struct AllOfResult17 {
  typedef BothOfMatcher<
      typename AllOfResult8<M1, M2, M3, M4, M5, M6, M7, M8>::type,
      typename AllOfResult9<M9, M10, M11, M12, M13, M14, M15, M16, M17>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18>
struct AllOfResult18 {
  typedef BothOfMatcher<
      typename AllOfResult9<M1, M2, M3, M4, M5, M6, M7, M8, M9>::type,
      typename AllOfResult9<M10, M11, M12, M13, M14, M15, M16, M17, M18>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19>
struct AllOfResult19 {
  typedef BothOfMatcher<
      typename AllOfResult9<M1, M2, M3, M4, M5, M6, M7, M8, M9>::type,
      typename AllOfResult10<M10, M11, M12, M13, M14, M15, M16, M17, M18,
          M19>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20>
struct AllOfResult20 {
  typedef BothOfMatcher<
      typename AllOfResult10<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10>::type,
      typename AllOfResult10<M11, M12, M13, M14, M15, M16, M17, M18, M19,
          M20>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21>
struct AllOfResult21 {
  typedef BothOfMatcher<
      typename AllOfResult10<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10>::type,
      typename AllOfResult11<M11, M12, M13, M14, M15, M16, M17, M18, M19, M20,
          M21>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22>
struct AllOfResult22 {
  typedef BothOfMatcher<
      typename AllOfResult11<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10,
          M11>::type,
      typename AllOfResult11<M12, M13, M14, M15, M16, M17, M18, M19, M20, M21,
          M22>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23>
struct AllOfResult23 {
  typedef BothOfMatcher<
      typename AllOfResult11<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10,
          M11>::type,
      typename AllOfResult12<M12, M13, M14, M15, M16, M17, M18, M19, M20, M21,
          M22, M23>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24>
struct AllOfResult24 {
  typedef BothOfMatcher<
      typename AllOfResult12<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11,
          M12>::type,
      typename AllOfResult12<M13, M14, M15, M16, M17, M18, M19, M20, M21, M22,
          M23, M24>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25>
struct AllOfResult25 {
  typedef BothOfMatcher<
      typename AllOfResult12<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11,
          M12>::type,
      typename AllOfResult13<M13, M14, M15, M16, M17, M18, M19, M20, M21, M22,
          M23, M24, M25>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26>
struct AllOfResult26 {
  typedef BothOfMatcher<
      typename AllOfResult13<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13>::type,
      typename AllOfResult13<M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
          M24, M25, M26>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27>
struct AllOfResult27 {
  typedef BothOfMatcher<
      typename AllOfResult13<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13>::type,
      typename AllOfResult14<M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
          M24, M25, M26, M27>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28>
struct AllOfResult28 {
  typedef BothOfMatcher<
      typename AllOfResult14<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14>::type,
      typename AllOfResult14<M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
          M25, M26, M27, M28>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29>
struct AllOfResult29 {
  typedef BothOfMatcher<
      typename AllOfResult14<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14>::type,
      typename AllOfResult15<M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
          M25, M26, M27, M28, M29>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30>
struct AllOfResult30 {
  typedef BothOfMatcher<
      typename AllOfResult15<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15>::type,
      typename AllOfResult15<M16, M17, M18, M19, M20, M21, M22, M23, M24, M25,
          M26, M27, M28, M29, M30>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31>
struct AllOfResult31 {
  typedef BothOfMatcher<
      typename AllOfResult15<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15>::type,
      typename AllOfResult16<M16, M17, M18, M19, M20, M21, M22, M23, M24, M25,
          M26, M27, M28, M29, M30, M31>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32>
struct AllOfResult32 {
  typedef BothOfMatcher<
      typename AllOfResult16<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16>::type,
      typename AllOfResult16<M17, M18, M19, M20, M21, M22, M23, M24, M25, M26,
          M27, M28, M29, M30, M31, M32>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33>
struct AllOfResult33 {
  typedef BothOfMatcher<
      typename AllOfResult16<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16>::type,
      typename AllOfResult17<M17, M18, M19, M20, M21, M22, M23, M24, M25, M26,
          M27, M28, M29, M30, M31, M32, M33>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34>
struct AllOfResult34 {
  typedef BothOfMatcher<
      typename AllOfResult17<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17>::type,
      typename AllOfResult17<M18, M19, M20, M21, M22, M23, M24, M25, M26, M27,
          M28, M29, M30, M31, M32, M33, M34>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35>
struct AllOfResult35 {
  typedef BothOfMatcher<
      typename AllOfResult17<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17>::type,
      typename AllOfResult18<M18, M19, M20, M21, M22, M23, M24, M25, M26, M27,
          M28, M29, M30, M31, M32, M33, M34, M35>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36>
struct AllOfResult36 {
  typedef BothOfMatcher<
      typename AllOfResult18<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18>::type,
      typename AllOfResult18<M19, M20, M21, M22, M23, M24, M25, M26, M27, M28,
          M29, M30, M31, M32, M33, M34, M35, M36>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37>
struct AllOfResult37 {
  typedef BothOfMatcher<
      typename AllOfResult18<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18>::type,
      typename AllOfResult19<M19, M20, M21, M22, M23, M24, M25, M26, M27, M28,
          M29, M30, M31, M32, M33, M34, M35, M36, M37>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38>
struct AllOfResult38 {
  typedef BothOfMatcher<
      typename AllOfResult19<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18, M19>::type,
      typename AllOfResult19<M20, M21, M22, M23, M24, M25, M26, M27, M28, M29,
          M30, M31, M32, M33, M34, M35, M36, M37, M38>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38, typename M39>
struct AllOfResult39 {
  typedef BothOfMatcher<
      typename AllOfResult19<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18, M19>::type,
      typename AllOfResult20<M20, M21, M22, M23, M24, M25, M26, M27, M28, M29,
          M30, M31, M32, M33, M34, M35, M36, M37, M38, M39>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38, typename M39, typename M40>
struct AllOfResult40 {
  typedef BothOfMatcher<
      typename AllOfResult20<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18, M19, M20>::type,
      typename AllOfResult20<M21, M22, M23, M24, M25, M26, M27, M28, M29, M30,
          M31, M32, M33, M34, M35, M36, M37, M38, M39, M40>::type
  > type;
};

// A set of metafunctions for computing the result type of AnyOf.
// AnyOf(m1, ..., mN) returns
// AnyOfResultN<decltype(m1), ..., decltype(mN)>::type.

// Although AnyOf isn't defined for one argument, AnyOfResult1 is defined
// to simplify the implementation.
template <typename M1>
struct AnyOfResult1 {
  typedef M1 type;
};

template <typename M1, typename M2>
struct AnyOfResult2 {
  typedef EitherOfMatcher<
      typename AnyOfResult1<M1>::type,
      typename AnyOfResult1<M2>::type
  > type;
};

template <typename M1, typename M2, typename M3>
struct AnyOfResult3 {
  typedef EitherOfMatcher<
      typename AnyOfResult1<M1>::type,
      typename AnyOfResult2<M2, M3>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4>
struct AnyOfResult4 {
  typedef EitherOfMatcher<
      typename AnyOfResult2<M1, M2>::type,
      typename AnyOfResult2<M3, M4>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5>
struct AnyOfResult5 {
  typedef EitherOfMatcher<
      typename AnyOfResult2<M1, M2>::type,
      typename AnyOfResult3<M3, M4, M5>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6>
struct AnyOfResult6 {
  typedef EitherOfMatcher<
      typename AnyOfResult3<M1, M2, M3>::type,
      typename AnyOfResult3<M4, M5, M6>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7>
struct AnyOfResult7 {
  typedef EitherOfMatcher<
      typename AnyOfResult3<M1, M2, M3>::type,
      typename AnyOfResult4<M4, M5, M6, M7>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8>
struct AnyOfResult8 {
  typedef EitherOfMatcher<
      typename AnyOfResult4<M1, M2, M3, M4>::type,
      typename AnyOfResult4<M5, M6, M7, M8>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9>
struct AnyOfResult9 {
  typedef EitherOfMatcher<
      typename AnyOfResult4<M1, M2, M3, M4>::type,
      typename AnyOfResult5<M5, M6, M7, M8, M9>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10>
struct AnyOfResult10 {
  typedef EitherOfMatcher<
      typename AnyOfResult5<M1, M2, M3, M4, M5>::type,
      typename AnyOfResult5<M6, M7, M8, M9, M10>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11>
struct AnyOfResult11 {
  typedef EitherOfMatcher<
      typename AnyOfResult5<M1, M2, M3, M4, M5>::type,
      typename AnyOfResult6<M6, M7, M8, M9, M10, M11>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12>
struct AnyOfResult12 {
  typedef EitherOfMatcher<
      typename AnyOfResult6<M1, M2, M3, M4, M5, M6>::type,
      typename AnyOfResult6<M7, M8, M9, M10, M11, M12>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13>
struct AnyOfResult13 {
  typedef EitherOfMatcher<
      typename AnyOfResult6<M1, M2, M3, M4, M5, M6>::type,
      typename AnyOfResult7<M7, M8, M9, M10, M11, M12, M13>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14>
struct AnyOfResult14 {
  typedef EitherOfMatcher<
      typename AnyOfResult7<M1, M2, M3, M4, M5, M6, M7>::type,
      typename AnyOfResult7<M8, M9, M10, M11, M12, M13, M14>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15>
struct AnyOfResult15 {
  typedef EitherOfMatcher<
      typename AnyOfResult7<M1, M2, M3, M4, M5, M6, M7>::type,
      typename AnyOfResult8<M8, M9, M10, M11, M12, M13, M14, M15>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16>
struct AnyOfResult16 {
  typedef EitherOfMatcher<
      typename AnyOfResult8<M1, M2, M3, M4, M5, M6, M7, M8>::type,
      typename AnyOfResult8<M9, M10, M11, M12, M13, M14, M15, M16>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17>
struct AnyOfResult17 {
  typedef EitherOfMatcher<
      typename AnyOfResult8<M1, M2, M3, M4, M5, M6, M7, M8>::type,
      typename AnyOfResult9<M9, M10, M11, M12, M13, M14, M15, M16, M17>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18>
struct AnyOfResult18 {
  typedef EitherOfMatcher<
      typename AnyOfResult9<M1, M2, M3, M4, M5, M6, M7, M8, M9>::type,
      typename AnyOfResult9<M10, M11, M12, M13, M14, M15, M16, M17, M18>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19>
struct AnyOfResult19 {
  typedef EitherOfMatcher<
      typename AnyOfResult9<M1, M2, M3, M4, M5, M6, M7, M8, M9>::type,
      typename AnyOfResult10<M10, M11, M12, M13, M14, M15, M16, M17, M18,
          M19>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20>
struct AnyOfResult20 {
  typedef EitherOfMatcher<
      typename AnyOfResult10<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10>::type,
      typename AnyOfResult10<M11, M12, M13, M14, M15, M16, M17, M18, M19,
          M20>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21>
struct AnyOfResult21 {
  typedef EitherOfMatcher<
      typename AnyOfResult10<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10>::type,
      typename AnyOfResult11<M11, M12, M13, M14, M15, M16, M17, M18, M19, M20,
          M21>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22>
struct AnyOfResult22 {
  typedef EitherOfMatcher<
      typename AnyOfResult11<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10,
          M11>::type,
      typename AnyOfResult11<M12, M13, M14, M15, M16, M17, M18, M19, M20, M21,
          M22>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23>
struct AnyOfResult23 {
  typedef EitherOfMatcher<
      typename AnyOfResult11<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10,
          M11>::type,
      typename AnyOfResult12<M12, M13, M14, M15, M16, M17, M18, M19, M20, M21,
          M22, M23>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24>
struct AnyOfResult24 {
  typedef EitherOfMatcher<
      typename AnyOfResult12<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11,
          M12>::type,
      typename AnyOfResult12<M13, M14, M15, M16, M17, M18, M19, M20, M21, M22,
          M23, M24>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25>
struct AnyOfResult25 {
  typedef EitherOfMatcher<
      typename AnyOfResult12<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11,
          M12>::type,
      typename AnyOfResult13<M13, M14, M15, M16, M17, M18, M19, M20, M21, M22,
          M23, M24, M25>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26>
struct AnyOfResult26 {
  typedef EitherOfMatcher<
      typename AnyOfResult13<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13>::type,
      typename AnyOfResult13<M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
          M24, M25, M26>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27>
struct AnyOfResult27 {
  typedef EitherOfMatcher<
      typename AnyOfResult13<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13>::type,
      typename AnyOfResult14<M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
          M24, M25, M26, M27>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28>
struct AnyOfResult28 {
  typedef EitherOfMatcher<
      typename AnyOfResult14<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14>::type,
      typename AnyOfResult14<M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
          M25, M26, M27, M28>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29>
struct AnyOfResult29 {
  typedef EitherOfMatcher<
      typename AnyOfResult14<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14>::type,
      typename AnyOfResult15<M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
          M25, M26, M27, M28, M29>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30>
struct AnyOfResult30 {
  typedef EitherOfMatcher<
      typename AnyOfResult15<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15>::type,
      typename AnyOfResult15<M16, M17, M18, M19, M20, M21, M22, M23, M24, M25,
          M26, M27, M28, M29, M30>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31>
struct AnyOfResult31 {
  typedef EitherOfMatcher<
      typename AnyOfResult15<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15>::type,
      typename AnyOfResult16<M16, M17, M18, M19, M20, M21, M22, M23, M24, M25,
          M26, M27, M28, M29, M30, M31>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32>
struct AnyOfResult32 {
  typedef EitherOfMatcher<
      typename AnyOfResult16<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16>::type,
      typename AnyOfResult16<M17, M18, M19, M20, M21, M22, M23, M24, M25, M26,
          M27, M28, M29, M30, M31, M32>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33>
struct AnyOfResult33 {
  typedef EitherOfMatcher<
      typename AnyOfResult16<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16>::type,
      typename AnyOfResult17<M17, M18, M19, M20, M21, M22, M23, M24, M25, M26,
          M27, M28, M29, M30, M31, M32, M33>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34>
struct AnyOfResult34 {
  typedef EitherOfMatcher<
      typename AnyOfResult17<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17>::type,
      typename AnyOfResult17<M18, M19, M20, M21, M22, M23, M24, M25, M26, M27,
          M28, M29, M30, M31, M32, M33, M34>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35>
struct AnyOfResult35 {
  typedef EitherOfMatcher<
      typename AnyOfResult17<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17>::type,
      typename AnyOfResult18<M18, M19, M20, M21, M22, M23, M24, M25, M26, M27,
          M28, M29, M30, M31, M32, M33, M34, M35>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36>
struct AnyOfResult36 {
  typedef EitherOfMatcher<
      typename AnyOfResult18<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18>::type,
      typename AnyOfResult18<M19, M20, M21, M22, M23, M24, M25, M26, M27, M28,
          M29, M30, M31, M32, M33, M34, M35, M36>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37>
struct AnyOfResult37 {
  typedef EitherOfMatcher<
      typename AnyOfResult18<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18>::type,
      typename AnyOfResult19<M19, M20, M21, M22, M23, M24, M25, M26, M27, M28,
          M29, M30, M31, M32, M33, M34, M35, M36, M37>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38>
struct AnyOfResult38 {
  typedef EitherOfMatcher<
      typename AnyOfResult19<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18, M19>::type,
      typename AnyOfResult19<M20, M21, M22, M23, M24, M25, M26, M27, M28, M29,
          M30, M31, M32, M33, M34, M35, M36, M37, M38>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38, typename M39>
struct AnyOfResult39 {
  typedef EitherOfMatcher<
      typename AnyOfResult19<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18, M19>::type,
      typename AnyOfResult20<M20, M21, M22, M23, M24, M25, M26, M27, M28, M29,
          M30, M31, M32, M33, M34, M35, M36, M37, M38, M39>::type
  > type;
};

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38, typename M39, typename M40>
struct AnyOfResult40 {
  typedef EitherOfMatcher<
      typename AnyOfResult20<M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12,
          M13, M14, M15, M16, M17, M18, M19, M20>::type,
      typename AnyOfResult20<M21, M22, M23, M24, M25, M26, M27, M28, M29, M30,
          M31, M32, M33, M34, M35, M36, M37, M38, M39, M40>::type
  > type;
};

}  // namespace internal

// Args<N1, N2, ..., Nk>(a_matcher) matches a tuple if the selected
// fields of it matches a_matcher.  C++ doesn't support default
// arguments for function templates, so we have to overload it.
template <typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher>(matcher);
}

template <int k1, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1>(matcher);
}

template <int k1, int k2, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2>(matcher);
}

template <int k1, int k2, int k3, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3>(matcher);
}

template <int k1, int k2, int k3, int k4, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6,
      k7>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7,
      k8>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21,
      k22>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22,
      k23>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31, int k32,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31, k32>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31, k32>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31, int k32,
    int k33, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31, k32, k33>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31, k32, k33>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31, int k32,
    int k33, int k34, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31, k32, k33, k34>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31, int k32,
    int k33, int k34, int k35, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31, int k32,
    int k33, int k34, int k35, int k36, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35,
      k36>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31, int k32,
    int k33, int k34, int k35, int k36, int k37, typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36,
      k37>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31, int k32,
    int k33, int k34, int k35, int k36, int k37, int k38,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37,
      k38>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31, int k32,
    int k33, int k34, int k35, int k36, int k37, int k38, int k39,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37,
      k38, k39>(matcher);
}

template <int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8,
    int k9, int k10, int k11, int k12, int k13, int k14, int k15, int k16,
    int k17, int k18, int k19, int k20, int k21, int k22, int k23, int k24,
    int k25, int k26, int k27, int k28, int k29, int k30, int k31, int k32,
    int k33, int k34, int k35, int k36, int k37, int k38, int k39, int k40,
    typename InnerMatcher>
inline internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9,
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
    k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39,
    k40>
Args(const InnerMatcher& matcher) {
  return internal::ArgsMatcher<InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8,
      k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23,
      k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37,
      k38, k39, k40>(matcher);
}

// ElementsAre(e_1, e_2, ... e_n) matches an STL-style container with
// n elements, where the i-th element in the container must
// match the i-th argument in the list.  Each argument of
// ElementsAre() can be either a value or a matcher.  We support up to
// 40 arguments.
//
// The use of DecayArray in the implementation allows ElementsAre()
// to accept string literals, whose type is const char[N], but we
// want to treat them as const char*.
//
// NOTE: Since ElementsAre() cares about the order of the elements, it
// must not be used with containers whose elements's order is
// undefined (e.g. hash_map).

inline internal::ElementsAreMatcher<
    ::testing::tuple<> >
ElementsAre() {
  typedef ::testing::tuple<> Args;
  return internal::ElementsAreMatcher<Args>(Args());
}

template <typename T1>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type> >
ElementsAre(const T1& e1) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1));
}

template <typename T1, typename T2>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type> >
ElementsAre(const T1& e1, const T2& e2) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2));
}

template <typename T1, typename T2, typename T3>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3));
}

template <typename T1, typename T2, typename T3, typename T4>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21,
      e22));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31, e32));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36, typename T37>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type,
        typename internal::DecayArray<T37>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36, const T37& e37) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type,
      typename internal::DecayArray<T37>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36,
      e37));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36, typename T37, typename T38>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type,
        typename internal::DecayArray<T37>::type,
        typename internal::DecayArray<T38>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36, const T37& e37,
    const T38& e38) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type,
      typename internal::DecayArray<T37>::type,
      typename internal::DecayArray<T38>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36,
      e37, e38));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36, typename T37, typename T38, typename T39>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type,
        typename internal::DecayArray<T37>::type,
        typename internal::DecayArray<T38>::type,
        typename internal::DecayArray<T39>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36, const T37& e37,
    const T38& e38, const T39& e39) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type,
      typename internal::DecayArray<T37>::type,
      typename internal::DecayArray<T38>::type,
      typename internal::DecayArray<T39>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36,
      e37, e38, e39));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36, typename T37, typename T38, typename T39, typename T40>
inline internal::ElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type,
        typename internal::DecayArray<T37>::type,
        typename internal::DecayArray<T38>::type,
        typename internal::DecayArray<T39>::type,
        typename internal::DecayArray<T40>::type> >
ElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36, const T37& e37,
    const T38& e38, const T39& e39, const T40& e40) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type,
      typename internal::DecayArray<T37>::type,
      typename internal::DecayArray<T38>::type,
      typename internal::DecayArray<T39>::type,
      typename internal::DecayArray<T40>::type> Args;
  return internal::ElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5, e6, e7,
      e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20, e21, e22,
      e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34, e35, e36,
      e37, e38, e39, e40));
}

// UnorderedElementsAre(e_1, e_2, ..., e_n) is an ElementsAre extension
// that matches n elements in any order.  We support up to n=40 arguments.

inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<> >
UnorderedElementsAre() {
  typedef ::testing::tuple<> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args());
}

template <typename T1>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type> >
UnorderedElementsAre(const T1& e1) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1));
}

template <typename T1, typename T2>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2));
}

template <typename T1, typename T2, typename T3>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3));
}

template <typename T1, typename T2, typename T3, typename T4>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34,
      e35));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34,
      e35, e36));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36, typename T37>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type,
        typename internal::DecayArray<T37>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36, const T37& e37) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type,
      typename internal::DecayArray<T37>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34,
      e35, e36, e37));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36, typename T37, typename T38>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type,
        typename internal::DecayArray<T37>::type,
        typename internal::DecayArray<T38>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36, const T37& e37,
    const T38& e38) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type,
      typename internal::DecayArray<T37>::type,
      typename internal::DecayArray<T38>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34,
      e35, e36, e37, e38));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36, typename T37, typename T38, typename T39>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type,
        typename internal::DecayArray<T37>::type,
        typename internal::DecayArray<T38>::type,
        typename internal::DecayArray<T39>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36, const T37& e37,
    const T38& e38, const T39& e39) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type,
      typename internal::DecayArray<T37>::type,
      typename internal::DecayArray<T38>::type,
      typename internal::DecayArray<T39>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34,
      e35, e36, e37, e38, e39));
}

template <typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8, typename T9, typename T10,
    typename T11, typename T12, typename T13, typename T14, typename T15,
    typename T16, typename T17, typename T18, typename T19, typename T20,
    typename T21, typename T22, typename T23, typename T24, typename T25,
    typename T26, typename T27, typename T28, typename T29, typename T30,
    typename T31, typename T32, typename T33, typename T34, typename T35,
    typename T36, typename T37, typename T38, typename T39, typename T40>
inline internal::UnorderedElementsAreMatcher<
    ::testing::tuple<
        typename internal::DecayArray<T1>::type,
        typename internal::DecayArray<T2>::type,
        typename internal::DecayArray<T3>::type,
        typename internal::DecayArray<T4>::type,
        typename internal::DecayArray<T5>::type,
        typename internal::DecayArray<T6>::type,
        typename internal::DecayArray<T7>::type,
        typename internal::DecayArray<T8>::type,
        typename internal::DecayArray<T9>::type,
        typename internal::DecayArray<T10>::type,
        typename internal::DecayArray<T11>::type,
        typename internal::DecayArray<T12>::type,
        typename internal::DecayArray<T13>::type,
        typename internal::DecayArray<T14>::type,
        typename internal::DecayArray<T15>::type,
        typename internal::DecayArray<T16>::type,
        typename internal::DecayArray<T17>::type,
        typename internal::DecayArray<T18>::type,
        typename internal::DecayArray<T19>::type,
        typename internal::DecayArray<T20>::type,
        typename internal::DecayArray<T21>::type,
        typename internal::DecayArray<T22>::type,
        typename internal::DecayArray<T23>::type,
        typename internal::DecayArray<T24>::type,
        typename internal::DecayArray<T25>::type,
        typename internal::DecayArray<T26>::type,
        typename internal::DecayArray<T27>::type,
        typename internal::DecayArray<T28>::type,
        typename internal::DecayArray<T29>::type,
        typename internal::DecayArray<T30>::type,
        typename internal::DecayArray<T31>::type,
        typename internal::DecayArray<T32>::type,
        typename internal::DecayArray<T33>::type,
        typename internal::DecayArray<T34>::type,
        typename internal::DecayArray<T35>::type,
        typename internal::DecayArray<T36>::type,
        typename internal::DecayArray<T37>::type,
        typename internal::DecayArray<T38>::type,
        typename internal::DecayArray<T39>::type,
        typename internal::DecayArray<T40>::type> >
UnorderedElementsAre(const T1& e1, const T2& e2, const T3& e3, const T4& e4,
    const T5& e5, const T6& e6, const T7& e7, const T8& e8, const T9& e9,
    const T10& e10, const T11& e11, const T12& e12, const T13& e13,
    const T14& e14, const T15& e15, const T16& e16, const T17& e17,
    const T18& e18, const T19& e19, const T20& e20, const T21& e21,
    const T22& e22, const T23& e23, const T24& e24, const T25& e25,
    const T26& e26, const T27& e27, const T28& e28, const T29& e29,
    const T30& e30, const T31& e31, const T32& e32, const T33& e33,
    const T34& e34, const T35& e35, const T36& e36, const T37& e37,
    const T38& e38, const T39& e39, const T40& e40) {
  typedef ::testing::tuple<
      typename internal::DecayArray<T1>::type,
      typename internal::DecayArray<T2>::type,
      typename internal::DecayArray<T3>::type,
      typename internal::DecayArray<T4>::type,
      typename internal::DecayArray<T5>::type,
      typename internal::DecayArray<T6>::type,
      typename internal::DecayArray<T7>::type,
      typename internal::DecayArray<T8>::type,
      typename internal::DecayArray<T9>::type,
      typename internal::DecayArray<T10>::type,
      typename internal::DecayArray<T11>::type,
      typename internal::DecayArray<T12>::type,
      typename internal::DecayArray<T13>::type,
      typename internal::DecayArray<T14>::type,
      typename internal::DecayArray<T15>::type,
      typename internal::DecayArray<T16>::type,
      typename internal::DecayArray<T17>::type,
      typename internal::DecayArray<T18>::type,
      typename internal::DecayArray<T19>::type,
      typename internal::DecayArray<T20>::type,
      typename internal::DecayArray<T21>::type,
      typename internal::DecayArray<T22>::type,
      typename internal::DecayArray<T23>::type,
      typename internal::DecayArray<T24>::type,
      typename internal::DecayArray<T25>::type,
      typename internal::DecayArray<T26>::type,
      typename internal::DecayArray<T27>::type,
      typename internal::DecayArray<T28>::type,
      typename internal::DecayArray<T29>::type,
      typename internal::DecayArray<T30>::type,
      typename internal::DecayArray<T31>::type,
      typename internal::DecayArray<T32>::type,
      typename internal::DecayArray<T33>::type,
      typename internal::DecayArray<T34>::type,
      typename internal::DecayArray<T35>::type,
      typename internal::DecayArray<T36>::type,
      typename internal::DecayArray<T37>::type,
      typename internal::DecayArray<T38>::type,
      typename internal::DecayArray<T39>::type,
      typename internal::DecayArray<T40>::type> Args;
  return internal::UnorderedElementsAreMatcher<Args>(Args(e1, e2, e3, e4, e5,
      e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20,
      e21, e22, e23, e24, e25, e26, e27, e28, e29, e30, e31, e32, e33, e34,
      e35, e36, e37, e38, e39, e40));
}

// AllOf(m1, m2, ..., mk) matches any value that matches all of the given
// sub-matchers.  AllOf is called fully qualified to prevent ADL from firing.

template <typename M1, typename M2>
inline typename internal::AllOfResult2<M1, M2>::type
AllOf(M1 m1, M2 m2) {
  return typename internal::AllOfResult2<M1, M2>::type(
      m1,
      m2);
}

template <typename M1, typename M2, typename M3>
inline typename internal::AllOfResult3<M1, M2, M3>::type
AllOf(M1 m1, M2 m2, M3 m3) {
  return typename internal::AllOfResult3<M1, M2, M3>::type(
      m1,
      ::testing::AllOf(m2, m3));
}

template <typename M1, typename M2, typename M3, typename M4>
inline typename internal::AllOfResult4<M1, M2, M3, M4>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4) {
  return typename internal::AllOfResult4<M1, M2, M3, M4>::type(
      ::testing::AllOf(m1, m2),
      ::testing::AllOf(m3, m4));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5>
inline typename internal::AllOfResult5<M1, M2, M3, M4, M5>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5) {
  return typename internal::AllOfResult5<M1, M2, M3, M4, M5>::type(
      ::testing::AllOf(m1, m2),
      ::testing::AllOf(m3, m4, m5));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6>
inline typename internal::AllOfResult6<M1, M2, M3, M4, M5, M6>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6) {
  return typename internal::AllOfResult6<M1, M2, M3, M4, M5, M6>::type(
      ::testing::AllOf(m1, m2, m3),
      ::testing::AllOf(m4, m5, m6));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7>
inline typename internal::AllOfResult7<M1, M2, M3, M4, M5, M6, M7>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7) {
  return typename internal::AllOfResult7<M1, M2, M3, M4, M5, M6, M7>::type(
      ::testing::AllOf(m1, m2, m3),
      ::testing::AllOf(m4, m5, m6, m7));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8>
inline typename internal::AllOfResult8<M1, M2, M3, M4, M5, M6, M7, M8>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8) {
  return typename internal::AllOfResult8<M1, M2, M3, M4, M5, M6, M7, M8>::type(
      ::testing::AllOf(m1, m2, m3, m4),
      ::testing::AllOf(m5, m6, m7, m8));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9>
inline typename internal::AllOfResult9<M1, M2, M3, M4, M5, M6, M7, M8, M9>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9) {
  return typename internal::AllOfResult9<M1, M2, M3, M4, M5, M6, M7, M8,
      M9>::type(
      ::testing::AllOf(m1, m2, m3, m4),
      ::testing::AllOf(m5, m6, m7, m8, m9));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10>
inline typename internal::AllOfResult10<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10) {
  return typename internal::AllOfResult10<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5),
      ::testing::AllOf(m6, m7, m8, m9, m10));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11>
inline typename internal::AllOfResult11<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11) {
  return typename internal::AllOfResult11<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5),
      ::testing::AllOf(m6, m7, m8, m9, m10, m11));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12>
inline typename internal::AllOfResult12<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12) {
  return typename internal::AllOfResult12<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6),
      ::testing::AllOf(m7, m8, m9, m10, m11, m12));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13>
inline typename internal::AllOfResult13<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13) {
  return typename internal::AllOfResult13<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6),
      ::testing::AllOf(m7, m8, m9, m10, m11, m12, m13));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14>
inline typename internal::AllOfResult14<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14) {
  return typename internal::AllOfResult14<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7),
      ::testing::AllOf(m8, m9, m10, m11, m12, m13, m14));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15>
inline typename internal::AllOfResult15<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15) {
  return typename internal::AllOfResult15<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7),
      ::testing::AllOf(m8, m9, m10, m11, m12, m13, m14, m15));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16>
inline typename internal::AllOfResult16<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16) {
  return typename internal::AllOfResult16<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8),
      ::testing::AllOf(m9, m10, m11, m12, m13, m14, m15, m16));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17>
inline typename internal::AllOfResult17<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17) {
  return typename internal::AllOfResult17<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8),
      ::testing::AllOf(m9, m10, m11, m12, m13, m14, m15, m16, m17));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18>
inline typename internal::AllOfResult18<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18) {
  return typename internal::AllOfResult18<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9),
      ::testing::AllOf(m10, m11, m12, m13, m14, m15, m16, m17, m18));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19>
inline typename internal::AllOfResult19<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19) {
  return typename internal::AllOfResult19<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9),
      ::testing::AllOf(m10, m11, m12, m13, m14, m15, m16, m17, m18, m19));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20>
inline typename internal::AllOfResult20<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20) {
  return typename internal::AllOfResult20<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10),
      ::testing::AllOf(m11, m12, m13, m14, m15, m16, m17, m18, m19, m20));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21>
inline typename internal::AllOfResult21<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21) {
  return typename internal::AllOfResult21<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10),
      ::testing::AllOf(m11, m12, m13, m14, m15, m16, m17, m18, m19, m20, m21));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22>
inline typename internal::AllOfResult22<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22) {
  return typename internal::AllOfResult22<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11),
      ::testing::AllOf(m12, m13, m14, m15, m16, m17, m18, m19, m20, m21, m22));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23>
inline typename internal::AllOfResult23<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23) {
  return typename internal::AllOfResult23<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22,
      M23>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11),
      ::testing::AllOf(m12, m13, m14, m15, m16, m17, m18, m19, m20, m21, m22,
          m23));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24>
inline typename internal::AllOfResult24<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
    M24>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24) {
  return typename internal::AllOfResult24<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12),
      ::testing::AllOf(m13, m14, m15, m16, m17, m18, m19, m20, m21, m22, m23,
          m24));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25>
inline typename internal::AllOfResult25<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25) {
  return typename internal::AllOfResult25<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12),
      ::testing::AllOf(m13, m14, m15, m16, m17, m18, m19, m20, m21, m22, m23,
          m24, m25));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26>
inline typename internal::AllOfResult26<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26) {
  return typename internal::AllOfResult26<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13),
      ::testing::AllOf(m14, m15, m16, m17, m18, m19, m20, m21, m22, m23, m24,
          m25, m26));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27>
inline typename internal::AllOfResult27<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27) {
  return typename internal::AllOfResult27<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13),
      ::testing::AllOf(m14, m15, m16, m17, m18, m19, m20, m21, m22, m23, m24,
          m25, m26, m27));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28>
inline typename internal::AllOfResult28<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28) {
  return typename internal::AllOfResult28<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14),
      ::testing::AllOf(m15, m16, m17, m18, m19, m20, m21, m22, m23, m24, m25,
          m26, m27, m28));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29>
inline typename internal::AllOfResult29<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29) {
  return typename internal::AllOfResult29<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14),
      ::testing::AllOf(m15, m16, m17, m18, m19, m20, m21, m22, m23, m24, m25,
          m26, m27, m28, m29));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30>
inline typename internal::AllOfResult30<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30) {
  return typename internal::AllOfResult30<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15),
      ::testing::AllOf(m16, m17, m18, m19, m20, m21, m22, m23, m24, m25, m26,
          m27, m28, m29, m30));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31>
inline typename internal::AllOfResult31<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31) {
  return typename internal::AllOfResult31<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15),
      ::testing::AllOf(m16, m17, m18, m19, m20, m21, m22, m23, m24, m25, m26,
          m27, m28, m29, m30, m31));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32>
inline typename internal::AllOfResult32<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32) {
  return typename internal::AllOfResult32<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16),
      ::testing::AllOf(m17, m18, m19, m20, m21, m22, m23, m24, m25, m26, m27,
          m28, m29, m30, m31, m32));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33>
inline typename internal::AllOfResult33<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33) {
  return typename internal::AllOfResult33<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16),
      ::testing::AllOf(m17, m18, m19, m20, m21, m22, m23, m24, m25, m26, m27,
          m28, m29, m30, m31, m32, m33));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34>
inline typename internal::AllOfResult34<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34) {
  return typename internal::AllOfResult34<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17),
      ::testing::AllOf(m18, m19, m20, m21, m22, m23, m24, m25, m26, m27, m28,
          m29, m30, m31, m32, m33, m34));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35>
inline typename internal::AllOfResult35<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35) {
  return typename internal::AllOfResult35<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17),
      ::testing::AllOf(m18, m19, m20, m21, m22, m23, m24, m25, m26, m27, m28,
          m29, m30, m31, m32, m33, m34, m35));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36>
inline typename internal::AllOfResult36<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36) {
  return typename internal::AllOfResult36<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18),
      ::testing::AllOf(m19, m20, m21, m22, m23, m24, m25, m26, m27, m28, m29,
          m30, m31, m32, m33, m34, m35, m36));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37>
inline typename internal::AllOfResult37<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36, M37 m37) {
  return typename internal::AllOfResult37<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36,
      M37>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18),
      ::testing::AllOf(m19, m20, m21, m22, m23, m24, m25, m26, m27, m28, m29,
          m30, m31, m32, m33, m34, m35, m36, m37));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38>
inline typename internal::AllOfResult38<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37, M38>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36, M37 m37, M38 m38) {
  return typename internal::AllOfResult38<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37,
      M38>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18, m19),
      ::testing::AllOf(m20, m21, m22, m23, m24, m25, m26, m27, m28, m29, m30,
          m31, m32, m33, m34, m35, m36, m37, m38));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38, typename M39>
inline typename internal::AllOfResult39<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37, M38,
    M39>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36, M37 m37, M38 m38, M39 m39) {
  return typename internal::AllOfResult39<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37,
      M38, M39>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18, m19),
      ::testing::AllOf(m20, m21, m22, m23, m24, m25, m26, m27, m28, m29, m30,
          m31, m32, m33, m34, m35, m36, m37, m38, m39));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38, typename M39, typename M40>
inline typename internal::AllOfResult40<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37, M38, M39,
    M40>::type
AllOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36, M37 m37, M38 m38, M39 m39, M40 m40) {
  return typename internal::AllOfResult40<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37,
      M38, M39, M40>::type(
      ::testing::AllOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18, m19, m20),
      ::testing::AllOf(m21, m22, m23, m24, m25, m26, m27, m28, m29, m30, m31,
          m32, m33, m34, m35, m36, m37, m38, m39, m40));
}

// AnyOf(m1, m2, ..., mk) matches any value that matches any of the given
// sub-matchers.  AnyOf is called fully qualified to prevent ADL from firing.

template <typename M1, typename M2>
inline typename internal::AnyOfResult2<M1, M2>::type
AnyOf(M1 m1, M2 m2) {
  return typename internal::AnyOfResult2<M1, M2>::type(
      m1,
      m2);
}

template <typename M1, typename M2, typename M3>
inline typename internal::AnyOfResult3<M1, M2, M3>::type
AnyOf(M1 m1, M2 m2, M3 m3) {
  return typename internal::AnyOfResult3<M1, M2, M3>::type(
      m1,
      ::testing::AnyOf(m2, m3));
}

template <typename M1, typename M2, typename M3, typename M4>
inline typename internal::AnyOfResult4<M1, M2, M3, M4>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4) {
  return typename internal::AnyOfResult4<M1, M2, M3, M4>::type(
      ::testing::AnyOf(m1, m2),
      ::testing::AnyOf(m3, m4));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5>
inline typename internal::AnyOfResult5<M1, M2, M3, M4, M5>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5) {
  return typename internal::AnyOfResult5<M1, M2, M3, M4, M5>::type(
      ::testing::AnyOf(m1, m2),
      ::testing::AnyOf(m3, m4, m5));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6>
inline typename internal::AnyOfResult6<M1, M2, M3, M4, M5, M6>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6) {
  return typename internal::AnyOfResult6<M1, M2, M3, M4, M5, M6>::type(
      ::testing::AnyOf(m1, m2, m3),
      ::testing::AnyOf(m4, m5, m6));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7>
inline typename internal::AnyOfResult7<M1, M2, M3, M4, M5, M6, M7>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7) {
  return typename internal::AnyOfResult7<M1, M2, M3, M4, M5, M6, M7>::type(
      ::testing::AnyOf(m1, m2, m3),
      ::testing::AnyOf(m4, m5, m6, m7));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8>
inline typename internal::AnyOfResult8<M1, M2, M3, M4, M5, M6, M7, M8>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8) {
  return typename internal::AnyOfResult8<M1, M2, M3, M4, M5, M6, M7, M8>::type(
      ::testing::AnyOf(m1, m2, m3, m4),
      ::testing::AnyOf(m5, m6, m7, m8));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9>
inline typename internal::AnyOfResult9<M1, M2, M3, M4, M5, M6, M7, M8, M9>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9) {
  return typename internal::AnyOfResult9<M1, M2, M3, M4, M5, M6, M7, M8,
      M9>::type(
      ::testing::AnyOf(m1, m2, m3, m4),
      ::testing::AnyOf(m5, m6, m7, m8, m9));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10>
inline typename internal::AnyOfResult10<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10) {
  return typename internal::AnyOfResult10<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5),
      ::testing::AnyOf(m6, m7, m8, m9, m10));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11>
inline typename internal::AnyOfResult11<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11) {
  return typename internal::AnyOfResult11<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5),
      ::testing::AnyOf(m6, m7, m8, m9, m10, m11));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12>
inline typename internal::AnyOfResult12<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12) {
  return typename internal::AnyOfResult12<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6),
      ::testing::AnyOf(m7, m8, m9, m10, m11, m12));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13>
inline typename internal::AnyOfResult13<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13) {
  return typename internal::AnyOfResult13<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6),
      ::testing::AnyOf(m7, m8, m9, m10, m11, m12, m13));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14>
inline typename internal::AnyOfResult14<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14) {
  return typename internal::AnyOfResult14<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7),
      ::testing::AnyOf(m8, m9, m10, m11, m12, m13, m14));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15>
inline typename internal::AnyOfResult15<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15) {
  return typename internal::AnyOfResult15<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7),
      ::testing::AnyOf(m8, m9, m10, m11, m12, m13, m14, m15));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16>
inline typename internal::AnyOfResult16<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16) {
  return typename internal::AnyOfResult16<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8),
      ::testing::AnyOf(m9, m10, m11, m12, m13, m14, m15, m16));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17>
inline typename internal::AnyOfResult17<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17) {
  return typename internal::AnyOfResult17<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8),
      ::testing::AnyOf(m9, m10, m11, m12, m13, m14, m15, m16, m17));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18>
inline typename internal::AnyOfResult18<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18) {
  return typename internal::AnyOfResult18<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9),
      ::testing::AnyOf(m10, m11, m12, m13, m14, m15, m16, m17, m18));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19>
inline typename internal::AnyOfResult19<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19) {
  return typename internal::AnyOfResult19<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9),
      ::testing::AnyOf(m10, m11, m12, m13, m14, m15, m16, m17, m18, m19));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20>
inline typename internal::AnyOfResult20<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20) {
  return typename internal::AnyOfResult20<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10),
      ::testing::AnyOf(m11, m12, m13, m14, m15, m16, m17, m18, m19, m20));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21>
inline typename internal::AnyOfResult21<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21) {
  return typename internal::AnyOfResult21<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10),
      ::testing::AnyOf(m11, m12, m13, m14, m15, m16, m17, m18, m19, m20, m21));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22>
inline typename internal::AnyOfResult22<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22) {
  return typename internal::AnyOfResult22<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11),
      ::testing::AnyOf(m12, m13, m14, m15, m16, m17, m18, m19, m20, m21, m22));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23>
inline typename internal::AnyOfResult23<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23) {
  return typename internal::AnyOfResult23<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22,
      M23>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11),
      ::testing::AnyOf(m12, m13, m14, m15, m16, m17, m18, m19, m20, m21, m22,
          m23));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24>
inline typename internal::AnyOfResult24<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
    M24>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24) {
  return typename internal::AnyOfResult24<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12),
      ::testing::AnyOf(m13, m14, m15, m16, m17, m18, m19, m20, m21, m22, m23,
          m24));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25>
inline typename internal::AnyOfResult25<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25) {
  return typename internal::AnyOfResult25<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12),
      ::testing::AnyOf(m13, m14, m15, m16, m17, m18, m19, m20, m21, m22, m23,
          m24, m25));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26>
inline typename internal::AnyOfResult26<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26) {
  return typename internal::AnyOfResult26<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13),
      ::testing::AnyOf(m14, m15, m16, m17, m18, m19, m20, m21, m22, m23, m24,
          m25, m26));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27>
inline typename internal::AnyOfResult27<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27) {
  return typename internal::AnyOfResult27<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13),
      ::testing::AnyOf(m14, m15, m16, m17, m18, m19, m20, m21, m22, m23, m24,
          m25, m26, m27));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28>
inline typename internal::AnyOfResult28<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28) {
  return typename internal::AnyOfResult28<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14),
      ::testing::AnyOf(m15, m16, m17, m18, m19, m20, m21, m22, m23, m24, m25,
          m26, m27, m28));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29>
inline typename internal::AnyOfResult29<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29) {
  return typename internal::AnyOfResult29<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14),
      ::testing::AnyOf(m15, m16, m17, m18, m19, m20, m21, m22, m23, m24, m25,
          m26, m27, m28, m29));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30>
inline typename internal::AnyOfResult30<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30) {
  return typename internal::AnyOfResult30<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15),
      ::testing::AnyOf(m16, m17, m18, m19, m20, m21, m22, m23, m24, m25, m26,
          m27, m28, m29, m30));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31>
inline typename internal::AnyOfResult31<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31) {
  return typename internal::AnyOfResult31<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15),
      ::testing::AnyOf(m16, m17, m18, m19, m20, m21, m22, m23, m24, m25, m26,
          m27, m28, m29, m30, m31));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32>
inline typename internal::AnyOfResult32<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32) {
  return typename internal::AnyOfResult32<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16),
      ::testing::AnyOf(m17, m18, m19, m20, m21, m22, m23, m24, m25, m26, m27,
          m28, m29, m30, m31, m32));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33>
inline typename internal::AnyOfResult33<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33) {
  return typename internal::AnyOfResult33<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16),
      ::testing::AnyOf(m17, m18, m19, m20, m21, m22, m23, m24, m25, m26, m27,
          m28, m29, m30, m31, m32, m33));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34>
inline typename internal::AnyOfResult34<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34) {
  return typename internal::AnyOfResult34<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17),
      ::testing::AnyOf(m18, m19, m20, m21, m22, m23, m24, m25, m26, m27, m28,
          m29, m30, m31, m32, m33, m34));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35>
inline typename internal::AnyOfResult35<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35) {
  return typename internal::AnyOfResult35<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17),
      ::testing::AnyOf(m18, m19, m20, m21, m22, m23, m24, m25, m26, m27, m28,
          m29, m30, m31, m32, m33, m34, m35));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36>
inline typename internal::AnyOfResult36<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36) {
  return typename internal::AnyOfResult36<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18),
      ::testing::AnyOf(m19, m20, m21, m22, m23, m24, m25, m26, m27, m28, m29,
          m30, m31, m32, m33, m34, m35, m36));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37>
inline typename internal::AnyOfResult37<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36, M37 m37) {
  return typename internal::AnyOfResult37<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36,
      M37>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18),
      ::testing::AnyOf(m19, m20, m21, m22, m23, m24, m25, m26, m27, m28, m29,
          m30, m31, m32, m33, m34, m35, m36, m37));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38>
inline typename internal::AnyOfResult38<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37, M38>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36, M37 m37, M38 m38) {
  return typename internal::AnyOfResult38<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37,
      M38>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18, m19),
      ::testing::AnyOf(m20, m21, m22, m23, m24, m25, m26, m27, m28, m29, m30,
          m31, m32, m33, m34, m35, m36, m37, m38));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38, typename M39>
inline typename internal::AnyOfResult39<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37, M38,
    M39>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36, M37 m37, M38 m38, M39 m39) {
  return typename internal::AnyOfResult39<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37,
      M38, M39>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18, m19),
      ::testing::AnyOf(m20, m21, m22, m23, m24, m25, m26, m27, m28, m29, m30,
          m31, m32, m33, m34, m35, m36, m37, m38, m39));
}

template <typename M1, typename M2, typename M3, typename M4, typename M5,
    typename M6, typename M7, typename M8, typename M9, typename M10,
    typename M11, typename M12, typename M13, typename M14, typename M15,
    typename M16, typename M17, typename M18, typename M19, typename M20,
    typename M21, typename M22, typename M23, typename M24, typename M25,
    typename M26, typename M27, typename M28, typename M29, typename M30,
    typename M31, typename M32, typename M33, typename M34, typename M35,
    typename M36, typename M37, typename M38, typename M39, typename M40>
inline typename internal::AnyOfResult40<M1, M2, M3, M4, M5, M6, M7, M8, M9,
    M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24,
    M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37, M38, M39,
    M40>::type
AnyOf(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10,
    M11 m11, M12 m12, M13 m13, M14 m14, M15 m15, M16 m16, M17 m17, M18 m18,
    M19 m19, M20 m20, M21 m21, M22 m22, M23 m23, M24 m24, M25 m25, M26 m26,
    M27 m27, M28 m28, M29 m29, M30 m30, M31 m31, M32 m32, M33 m33, M34 m34,
    M35 m35, M36 m36, M37 m37, M38 m38, M39 m39, M40 m40) {
  return typename internal::AnyOfResult40<M1, M2, M3, M4, M5, M6, M7, M8, M9,
      M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23,
      M24, M25, M26, M27, M28, M29, M30, M31, M32, M33, M34, M35, M36, M37,
      M38, M39, M40>::type(
      ::testing::AnyOf(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13,
          m14, m15, m16, m17, m18, m19, m20),
      ::testing::AnyOf(m21, m22, m23, m24, m25, m26, m27, m28, m29, m30, m31,
          m32, m33, m34, m35, m36, m37, m38, m39, m40));
}

}  // namespace testing


// The MATCHER* family of macros can be used in a namespace scope to
// define custom matchers easily.
//
// Basic Usage
// ===========
//
// The syntax
//
//   MATCHER(name, description_string) { statements; }
//
// defines a matcher with the given name that executes the statements,
// which must return a bool to indicate if the match succeeds.  Inside
// the statements, you can refer to the value being matched by 'arg',
// and refer to its type by 'arg_type'.
//
// The description string documents what the matcher does, and is used
// to generate the failure message when the match fails.  Since a
// MATCHER() is usually defined in a header file shared by multiple
// C++ source files, we require the description to be a C-string
// literal to avoid possible side effects.  It can be empty, in which
// case we'll use the sequence of words in the matcher name as the
// description.
//
// For example:
//
//   MATCHER(IsEven, "") { return (arg % 2) == 0; }
//
// allows you to write
//
//   // Expects mock_foo.Bar(n) to be called where n is even.
//   EXPECT_CALL(mock_foo, Bar(IsEven()));
//
// or,
//
//   // Verifies that the value of some_expression is even.
//   EXPECT_THAT(some_expression, IsEven());
//
// If the above assertion fails, it will print something like:
//
//   Value of: some_expression
//   Expected: is even
//     Actual: 7
//
// where the description "is even" is automatically calculated from the
// matcher name IsEven.
//
// Argument Type
// =============
//
// Note that the type of the value being matched (arg_type) is
// determined by the context in which you use the matcher and is
// supplied to you by the compiler, so you don't need to worry about
// declaring it (nor can you).  This allows the matcher to be
// polymorphic.  For example, IsEven() can be used to match any type
// where the value of "(arg % 2) == 0" can be implicitly converted to
// a bool.  In the "Bar(IsEven())" example above, if method Bar()
// takes an int, 'arg_type' will be int; if it takes an unsigned long,
// 'arg_type' will be unsigned long; and so on.
//
// Parameterizing Matchers
// =======================
//
// Sometimes you'll want to parameterize the matcher.  For that you
// can use another macro:
//
//   MATCHER_P(name, param_name, description_string) { statements; }
//
// For example:
//
//   MATCHER_P(HasAbsoluteValue, value, "") { return abs(arg) == value; }
//
// will allow you to write:
//
//   EXPECT_THAT(Blah("a"), HasAbsoluteValue(n));
//
// which may lead to this message (assuming n is 10):
//
//   Value of: Blah("a")
//   Expected: has absolute value 10
//     Actual: -9
//
// Note that both the matcher description and its parameter are
// printed, making the message human-friendly.
//
// In the matcher definition body, you can write 'foo_type' to
// reference the type of a parameter named 'foo'.  For example, in the
// body of MATCHER_P(HasAbsoluteValue, value) above, you can write
// 'value_type' to refer to the type of 'value'.
//
// We also provide MATCHER_P2, MATCHER_P3, ..., up to MATCHER_P40 to
// support multi-parameter matchers.
//
// Describing Parameterized Matchers
// =================================
//
// The last argument to MATCHER*() is a string-typed expression.  The
// expression can reference all of the matcher's parameters and a
// special bool-typed variable named 'negation'.  When 'negation' is
// false, the expression should evaluate to the matcher's description;
// otherwise it should evaluate to the description of the negation of
// the matcher.  For example,
//
//   using testing::PrintToString;
//
//   MATCHER_P2(InClosedRange, low, hi,
//       string(negation ? "is not" : "is") + " in range [" +
//       PrintToString(low) + ", " + PrintToString(hi) + "]") {
//     return low <= arg && arg <= hi;
//   }
//   ...
//   EXPECT_THAT(3, InClosedRange(4, 6));
//   EXPECT_THAT(3, Not(InClosedRange(2, 4)));
//
// would generate two failures that contain the text:
//
//   Expected: is in range [4, 6]
//   ...
//   Expected: is not in range [2, 4]
//
// If you specify "" as the description, the failure message will
// contain the sequence of words in the matcher name followed by the
// parameter values printed as a tuple.  For example,
//
//   MATCHER_P2(InClosedRange, low, hi, "") { ... }
//   ...
//   EXPECT_THAT(3, InClosedRange(4, 6));
//   EXPECT_THAT(3, Not(InClosedRange(2, 4)));
//
// would generate two failures that contain the text:
//
//   Expected: in closed range (4, 6)
//   ...
//   Expected: not (in closed range (2, 4))
//
// Types of Matcher Parameters
// ===========================
//
// For the purpose of typing, you can view
//
//   MATCHER_Pk(Foo, p1, ..., pk, description_string) { ... }
//
// as shorthand for
//
//   template <typename p1_type, ..., typename pk_type>
//   FooMatcherPk<p1_type, ..., pk_type>
//   Foo(p1_type p1, ..., pk_type pk) { ... }
//
// When you write Foo(v1, ..., vk), the compiler infers the types of
// the parameters v1, ..., and vk for you.  If you are not happy with
// the result of the type inference, you can specify the types by
// explicitly instantiating the template, as in Foo<long, bool>(5,
// false).  As said earlier, you don't get to (or need to) specify
// 'arg_type' as that's determined by the context in which the matcher
// is used.  You can assign the result of expression Foo(p1, ..., pk)
// to a variable of type FooMatcherPk<p1_type, ..., pk_type>.  This
// can be useful when composing matchers.
//
// While you can instantiate a matcher template with reference types,
// passing the parameters by pointer usually makes your code more
// readable.  If, however, you still want to pass a parameter by
// reference, be aware that in the failure message generated by the
// matcher you will see the value of the referenced object but not its
// address.
//
// Explaining Match Results
// ========================
//
// Sometimes the matcher description alone isn't enough to explain why
// the match has failed or succeeded.  For example, when expecting a
// long string, it can be very helpful to also print the diff between
// the expected string and the actual one.  To achieve that, you can
// optionally stream additional information to a special variable
// named result_listener, whose type is a pointer to class
// MatchResultListener:
//
//   MATCHER_P(EqualsLongString, str, "") {
//     if (arg == str) return true;
//
//     *result_listener << "the difference: "
///                     << DiffStrings(str, arg);
//     return false;
//   }
//
// Overloading Matchers
// ====================
//
// You can overload matchers with different numbers of parameters:
//
//   MATCHER_P(Blah, a, description_string1) { ... }
//   MATCHER_P2(Blah, a, b, description_string2) { ... }
//
// Caveats
// =======
//
// When defining a new matcher, you should also consider implementing
// MatcherInterface or using MakePolymorphicMatcher().  These
// approaches require more work than the MATCHER* macros, but also
// give you more control on the types of the value being matched and
// the matcher parameters, which may leads to better compiler error
// messages when the matcher is used wrong.  They also allow
// overloading matchers based on parameter types (as opposed to just
// based on the number of parameters).
//
// MATCHER*() can only be used in a namespace scope.  The reason is
// that C++ doesn't yet allow function-local types to be used to
// instantiate templates.  The up-coming C++0x standard will fix this.
// Once that's done, we'll consider supporting using MATCHER*() inside
// a function.
//
// More Information
// ================
//
// To learn more about using these macros, please search for 'MATCHER'
// on http://code.google.com/p/googlemock/wiki/CookBook.

#define MATCHER(name, description)\
  class name##Matcher {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl()\
           {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<>()));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>());\
    }\
    name##Matcher() {\
    }\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##Matcher);\
  };\
  inline name##Matcher name() {\
    return name##Matcher();\
  }\
  template <typename arg_type>\
  bool name##Matcher::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P(name, p0, description)\
  template <typename p0##_type>\
  class name##MatcherP {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      explicit gmock_Impl(p0##_type gmock_p0)\
           : p0(gmock_p0) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type>(p0)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0));\
    }\
    explicit name##MatcherP(p0##_type gmock_p0) : p0(gmock_p0) {\
    }\
    p0##_type p0;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP);\
  };\
  template <typename p0##_type>\
  inline name##MatcherP<p0##_type> name(p0##_type p0) {\
    return name##MatcherP<p0##_type>(p0);\
  }\
  template <typename p0##_type>\
  template <typename arg_type>\
  bool name##MatcherP<p0##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P2(name, p0, p1, description)\
  template <typename p0##_type, typename p1##_type>\
  class name##MatcherP2 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1)\
           : p0(gmock_p0), p1(gmock_p1) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type>(p0, p1)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1));\
    }\
    name##MatcherP2(p0##_type gmock_p0, p1##_type gmock_p1) : p0(gmock_p0), \
        p1(gmock_p1) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP2);\
  };\
  template <typename p0##_type, typename p1##_type>\
  inline name##MatcherP2<p0##_type, p1##_type> name(p0##_type p0, \
      p1##_type p1) {\
    return name##MatcherP2<p0##_type, p1##_type>(p0, p1);\
  }\
  template <typename p0##_type, typename p1##_type>\
  template <typename arg_type>\
  bool name##MatcherP2<p0##_type, \
      p1##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P3(name, p0, p1, p2, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type>\
  class name##MatcherP3 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type>(p0, p1, \
                    p2)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2));\
    }\
    name##MatcherP3(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP3);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type>\
  inline name##MatcherP3<p0##_type, p1##_type, p2##_type> name(p0##_type p0, \
      p1##_type p1, p2##_type p2) {\
    return name##MatcherP3<p0##_type, p1##_type, p2##_type>(p0, p1, p2);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type>\
  template <typename arg_type>\
  bool name##MatcherP3<p0##_type, p1##_type, \
      p2##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P4(name, p0, p1, p2, p3, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type>\
  class name##MatcherP4 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, \
                    p3##_type>(p0, p1, p2, p3)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3));\
    }\
    name##MatcherP4(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3) : p0(gmock_p0), p1(gmock_p1), \
        p2(gmock_p2), p3(gmock_p3) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP4);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type>\
  inline name##MatcherP4<p0##_type, p1##_type, p2##_type, \
      p3##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3) {\
    return name##MatcherP4<p0##_type, p1##_type, p2##_type, p3##_type>(p0, \
        p1, p2, p3);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type>\
  template <typename arg_type>\
  bool name##MatcherP4<p0##_type, p1##_type, p2##_type, \
      p3##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P5(name, p0, p1, p2, p3, p4, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type>\
  class name##MatcherP5 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type>(p0, p1, p2, p3, p4)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4));\
    }\
    name##MatcherP5(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, \
        p4##_type gmock_p4) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP5);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type>\
  inline name##MatcherP5<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \
      p4##_type p4) {\
    return name##MatcherP5<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type>(p0, p1, p2, p3, p4);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type>\
  template <typename arg_type>\
  bool name##MatcherP5<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P6(name, p0, p1, p2, p3, p4, p5, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type>\
  class name##MatcherP6 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type>(p0, p1, p2, p3, p4, p5)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5));\
    }\
    name##MatcherP6(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP6);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type>\
  inline name##MatcherP6<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5) {\
    return name##MatcherP6<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type>(p0, p1, p2, p3, p4, p5);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type>\
  template <typename arg_type>\
  bool name##MatcherP6<p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \
      p5##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P7(name, p0, p1, p2, p3, p4, p5, p6, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type>\
  class name##MatcherP7 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type>(p0, p1, p2, p3, p4, p5, \
                    p6)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6));\
    }\
    name##MatcherP7(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6) : p0(gmock_p0), p1(gmock_p1), \
        p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP7);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type>\
  inline name##MatcherP7<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type> name(p0##_type p0, p1##_type p1, \
      p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \
      p6##_type p6) {\
    return name##MatcherP7<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type>(p0, p1, p2, p3, p4, p5, p6);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type>\
  template <typename arg_type>\
  bool name##MatcherP7<p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \
      p5##_type, p6##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P8(name, p0, p1, p2, p3, p4, p5, p6, p7, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type>\
  class name##MatcherP8 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type>(p0, p1, p2, \
                    p3, p4, p5, p6, p7)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7));\
    }\
    name##MatcherP8(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, \
        p7##_type gmock_p7) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), \
        p7(gmock_p7) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP8);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type>\
  inline name##MatcherP8<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type> name(p0##_type p0, \
      p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \
      p6##_type p6, p7##_type p7) {\
    return name##MatcherP8<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type>(p0, p1, p2, p3, p4, p5, \
        p6, p7);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type>\
  template <typename arg_type>\
  bool name##MatcherP8<p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \
      p5##_type, p6##_type, \
      p7##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P9(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type>\
  class name##MatcherP9 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, \
                    p8##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8));\
    }\
    name##MatcherP9(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP9);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type>\
  inline name##MatcherP9<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, \
      p8##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \
      p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8) {\
    return name##MatcherP9<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type>(p0, p1, p2, \
        p3, p4, p5, p6, p7, p8);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type>\
  template <typename arg_type>\
  bool name##MatcherP9<p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \
      p5##_type, p6##_type, p7##_type, \
      p8##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P10(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type>\
  class name##MatcherP10 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9));\
    }\
    name##MatcherP10(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9) : p0(gmock_p0), p1(gmock_p1), \
        p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), \
        p7(gmock_p7), p8(gmock_p8), p9(gmock_p9) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP10);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type>\
  inline name##MatcherP10<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
      p9##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \
      p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8, \
      p9##_type p9) {\
    return name##MatcherP10<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type>(p0, \
        p1, p2, p3, p4, p5, p6, p7, p8, p9);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type>\
  template <typename arg_type>\
  bool name##MatcherP10<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
      p9##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P11(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
    description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type>\
  class name##MatcherP11 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
                    p8, p9, p10)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10));\
    }\
    name##MatcherP11(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, \
        p10##_type gmock_p10) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP11);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type>\
  inline name##MatcherP11<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10) {\
    return name##MatcherP11<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type>\
  template <typename arg_type>\
  bool name##MatcherP11<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P12(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type>\
  class name##MatcherP12 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type>(p0, p1, p2, p3, p4, \
                    p5, p6, p7, p8, p9, p10, p11)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11));\
    }\
    name##MatcherP12(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP12);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type>\
  inline name##MatcherP12<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11) {\
    return name##MatcherP12<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
        p11);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type>\
  template <typename arg_type>\
  bool name##MatcherP12<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P13(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type>\
  class name##MatcherP13 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type>(p0, p1, \
                    p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12));\
    }\
    name##MatcherP13(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP13);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type>\
  inline name##MatcherP13<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type> name(p0##_type p0, p1##_type p1, \
      p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, \
      p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12) {\
    return name##MatcherP13<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
        p8, p9, p10, p11, p12);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type>\
  template <typename arg_type>\
  bool name##MatcherP13<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, \
      p12##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P14(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type>\
  class name##MatcherP14 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
                    p11, p12, p13)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13));\
    }\
    name##MatcherP14(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, \
        p13##_type gmock_p13) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP14);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type>\
  inline name##MatcherP14<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type> name(p0##_type p0, \
      p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \
      p6##_type p6, p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12, p13##_type p13) {\
    return name##MatcherP14<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type>(p0, p1, p2, p3, p4, \
        p5, p6, p7, p8, p9, p10, p11, p12, p13);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type>\
  template <typename arg_type>\
  bool name##MatcherP14<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, \
      p13##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P15(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type>\
  class name##MatcherP15 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
                    p8, p9, p10, p11, p12, p13, p14)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14));\
    }\
    name##MatcherP15(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP15);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type>\
  inline name##MatcherP15<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, \
      p14##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14) {\
    return name##MatcherP15<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type>(p0, p1, \
        p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type>\
  template <typename arg_type>\
  bool name##MatcherP15<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, \
      p14##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P16(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type>\
  class name##MatcherP16 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type>(p0, p1, p2, p3, p4, \
                    p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15));\
    }\
    name##MatcherP16(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12), p13(gmock_p13), \
        p14(gmock_p14), p15(gmock_p15) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP16);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type>\
  inline name##MatcherP16<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
      p15##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15) {\
    return name##MatcherP16<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, \
        p13, p14, p15);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type>\
  template <typename arg_type>\
  bool name##MatcherP16<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
      p15##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P17(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type>\
  class name##MatcherP17 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type>(p0, p1, \
                    p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, \
                    p15, p16)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16));\
    }\
    name##MatcherP17(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, \
        p16##_type gmock_p16) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP17);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type>\
  inline name##MatcherP17<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16) {\
    return name##MatcherP17<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
        p11, p12, p13, p14, p15, p16);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type>\
  template <typename arg_type>\
  bool name##MatcherP17<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P18(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type>\
  class name##MatcherP18 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
                    p11, p12, p13, p14, p15, p16, p17)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17));\
    }\
    name##MatcherP18(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP18);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type>\
  inline name##MatcherP18<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17) {\
    return name##MatcherP18<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
        p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type>\
  template <typename arg_type>\
  bool name##MatcherP18<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P19(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type>\
  class name##MatcherP19 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
                    p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18));\
    }\
    name##MatcherP19(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12), p13(gmock_p13), \
        p14(gmock_p14), p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
        p18(gmock_p18) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP19);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type>\
  inline name##MatcherP19<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type> name(p0##_type p0, p1##_type p1, \
      p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, \
      p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12, p13##_type p13, p14##_type p14, \
      p15##_type p15, p16##_type p16, p17##_type p17, p18##_type p18) {\
    return name##MatcherP19<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type>(p0, p1, p2, p3, p4, \
        p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type>\
  template <typename arg_type>\
  bool name##MatcherP19<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, \
      p18##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P20(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type>\
  class name##MatcherP20 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type>(p0, p1, p2, p3, p4, \
                    p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
                    p17, p18, p19)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19));\
    }\
    name##MatcherP20(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, \
        p19##_type gmock_p19) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP20);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type>\
  inline name##MatcherP20<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type> name(p0##_type p0, \
      p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \
      p6##_type p6, p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12, p13##_type p13, p14##_type p14, \
      p15##_type p15, p16##_type p16, p17##_type p17, p18##_type p18, \
      p19##_type p19) {\
    return name##MatcherP20<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type>(p0, p1, \
        p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
        p17, p18, p19);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type>\
  template <typename arg_type>\
  bool name##MatcherP20<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, \
      p19##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P21(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type>\
  class name##MatcherP21 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type>(p0, p1, \
                    p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, \
                    p15, p16, p17, p18, p19, p20)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20));\
    }\
    name##MatcherP21(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP21);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type>\
  inline name##MatcherP21<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, \
      p20##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20) {\
    return name##MatcherP21<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, \
        p13, p14, p15, p16, p17, p18, p19, p20);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type>\
  template <typename arg_type>\
  bool name##MatcherP21<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, \
      p20##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P22(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type>\
  class name##MatcherP22 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
                    p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21))); \
                    \
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21));\
    }\
    name##MatcherP22(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12), p13(gmock_p13), \
        p14(gmock_p14), p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
        p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), p21(gmock_p21) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP22);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type>\
  inline name##MatcherP22<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, \
      p21##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21) {\
    return name##MatcherP22<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
        p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type>\
  template <typename arg_type>\
  bool name##MatcherP22<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, \
      p21##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P23(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type>\
  class name##MatcherP23 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
                    p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, \
                    p20, p21, p22)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22));\
    }\
    name##MatcherP23(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, \
        p22##_type gmock_p22) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP23);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type>\
  inline name##MatcherP23<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22) {\
    return name##MatcherP23<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
        p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
        p22);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type>\
  template <typename arg_type>\
  bool name##MatcherP23<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P24(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type>\
  class name##MatcherP24 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type>(p0, p1, p2, p3, p4, \
                    p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
                    p17, p18, p19, p20, p21, p22, p23)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23));\
    }\
    name##MatcherP24(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP24);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type>\
  inline name##MatcherP24<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23) {\
    return name##MatcherP24<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type>(p0, p1, p2, p3, p4, \
        p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, \
        p20, p21, p22, p23);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type>\
  template <typename arg_type>\
  bool name##MatcherP24<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P25(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, \
    description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type>\
  class name##MatcherP25 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type>(p0, p1, \
                    p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, \
                    p15, p16, p17, p18, p19, p20, p21, p22, p23, p24)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24));\
    }\
    name##MatcherP25(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12), p13(gmock_p13), \
        p14(gmock_p14), p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
        p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), p21(gmock_p21), \
        p22(gmock_p22), p23(gmock_p23), p24(gmock_p24) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP25);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type>\
  inline name##MatcherP25<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type> name(p0##_type p0, p1##_type p1, \
      p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, \
      p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12, p13##_type p13, p14##_type p14, \
      p15##_type p15, p16##_type p16, p17##_type p17, p18##_type p18, \
      p19##_type p19, p20##_type p20, p21##_type p21, p22##_type p22, \
      p23##_type p23, p24##_type p24) {\
    return name##MatcherP25<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type>(p0, p1, \
        p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
        p17, p18, p19, p20, p21, p22, p23, p24);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type>\
  template <typename arg_type>\
  bool name##MatcherP25<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, \
      p24##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P26(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type>\
  class name##MatcherP26 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
                    p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
                    p22, p23, p24, p25)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25));\
    }\
    name##MatcherP26(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, \
        p25##_type gmock_p25) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP26);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type>\
  inline name##MatcherP26<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type> name(p0##_type p0, \
      p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \
      p6##_type p6, p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12, p13##_type p13, p14##_type p14, \
      p15##_type p15, p16##_type p16, p17##_type p17, p18##_type p18, \
      p19##_type p19, p20##_type p20, p21##_type p21, p22##_type p22, \
      p23##_type p23, p24##_type p24, p25##_type p25) {\
    return name##MatcherP26<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, \
        p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type>\
  template <typename arg_type>\
  bool name##MatcherP26<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, \
      p25##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P27(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type>\
  class name##MatcherP27 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
                    p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, \
                    p20, p21, p22, p23, p24, p25, p26)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26));\
    }\
    name##MatcherP27(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25), p26(gmock_p26) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP27);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type>\
  inline name##MatcherP27<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, \
      p26##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26) {\
    return name##MatcherP27<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
        p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, \
        p25, p26);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type>\
  template <typename arg_type>\
  bool name##MatcherP27<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, \
      p26##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P28(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type>\
  class name##MatcherP28 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type>(p0, p1, p2, p3, p4, \
                    p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
                    p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27))); \
                    \
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27));\
    }\
    name##MatcherP28(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12), p13(gmock_p13), \
        p14(gmock_p14), p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
        p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), p21(gmock_p21), \
        p22(gmock_p22), p23(gmock_p23), p24(gmock_p24), p25(gmock_p25), \
        p26(gmock_p26), p27(gmock_p27) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP28);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type>\
  inline name##MatcherP28<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, \
      p27##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26, p27##_type p27) {\
    return name##MatcherP28<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
        p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
        p22, p23, p24, p25, p26, p27);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type>\
  template <typename arg_type>\
  bool name##MatcherP28<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, \
      p27##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P29(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type>\
  class name##MatcherP29 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type>(p0, p1, \
                    p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, \
                    p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
                    p26, p27, p28)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28));\
    }\
    name##MatcherP29(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, \
        p28##_type gmock_p28) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), p27(gmock_p27), \
        p28(gmock_p28) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP29);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type>\
  inline name##MatcherP29<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26, p27##_type p27, \
      p28##_type p28) {\
    return name##MatcherP29<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type>(p0, p1, p2, p3, p4, \
        p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, \
        p20, p21, p22, p23, p24, p25, p26, p27, p28);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type>\
  template <typename arg_type>\
  bool name##MatcherP29<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P30(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type>\
  class name##MatcherP30 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
                    p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
                    p22, p23, p24, p25, p26, p27, p28, p29)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29));\
    }\
    name##MatcherP30(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), p27(gmock_p27), \
        p28(gmock_p28), p29(gmock_p29) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP30);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type>\
  inline name##MatcherP30<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26, p27##_type p27, \
      p28##_type p28, p29##_type p29) {\
    return name##MatcherP30<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type>(p0, p1, \
        p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
        p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type>\
  template <typename arg_type>\
  bool name##MatcherP30<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P31(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type>\
  class name##MatcherP31 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
                    p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, \
                    p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30))); \
                    \
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30));\
    }\
    name##MatcherP31(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12), p13(gmock_p13), \
        p14(gmock_p14), p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
        p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), p21(gmock_p21), \
        p22(gmock_p22), p23(gmock_p23), p24(gmock_p24), p25(gmock_p25), \
        p26(gmock_p26), p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
        p30(gmock_p30) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP31);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type>\
  inline name##MatcherP31<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type> name(p0##_type p0, p1##_type p1, \
      p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, \
      p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12, p13##_type p13, p14##_type p14, \
      p15##_type p15, p16##_type p16, p17##_type p17, p18##_type p18, \
      p19##_type p19, p20##_type p20, p21##_type p21, p22##_type p22, \
      p23##_type p23, p24##_type p24, p25##_type p25, p26##_type p26, \
      p27##_type p27, p28##_type p28, p29##_type p29, p30##_type p30) {\
    return name##MatcherP31<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, \
        p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, \
        p27, p28, p29, p30);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type>\
  template <typename arg_type>\
  bool name##MatcherP31<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, \
      p30##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P32(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, p31, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type>\
  class name##MatcherP32 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30, p31##_type gmock_p31)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30), p31(gmock_p31) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
      p31##_type p31;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type, p31##_type>(p0, p1, p2, p3, p4, \
                    p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
                    p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, \
                    p28, p29, p30, p31)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30, p31));\
    }\
    name##MatcherP32(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30, \
        p31##_type gmock_p31) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), p27(gmock_p27), \
        p28(gmock_p28), p29(gmock_p29), p30(gmock_p30), p31(gmock_p31) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
    p31##_type p31;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP32);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type>\
  inline name##MatcherP32<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type> name(p0##_type p0, \
      p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \
      p6##_type p6, p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12, p13##_type p13, p14##_type p14, \
      p15##_type p15, p16##_type p16, p17##_type p17, p18##_type p18, \
      p19##_type p19, p20##_type p20, p21##_type p21, p22##_type p22, \
      p23##_type p23, p24##_type p24, p25##_type p25, p26##_type p26, \
      p27##_type p27, p28##_type p28, p29##_type p29, p30##_type p30, \
      p31##_type p31) {\
    return name##MatcherP32<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type, p31##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
        p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, \
        p25, p26, p27, p28, p29, p30, p31);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type>\
  template <typename arg_type>\
  bool name##MatcherP32<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, \
      p31##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P33(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, p31, p32, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type>\
  class name##MatcherP33 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30, p31##_type gmock_p31, p32##_type gmock_p32)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30), p31(gmock_p31), p32(gmock_p32) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
      p31##_type p31;\
      p32##_type p32;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type, p31##_type, p32##_type>(p0, p1, \
                    p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, \
                    p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
                    p26, p27, p28, p29, p30, p31, p32)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32));\
    }\
    name##MatcherP33(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30, p31##_type gmock_p31, \
        p32##_type gmock_p32) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), p27(gmock_p27), \
        p28(gmock_p28), p29(gmock_p29), p30(gmock_p30), p31(gmock_p31), \
        p32(gmock_p32) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
    p31##_type p31;\
    p32##_type p32;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP33);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type>\
  inline name##MatcherP33<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, \
      p32##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26, p27##_type p27, \
      p28##_type p28, p29##_type p29, p30##_type p30, p31##_type p31, \
      p32##_type p32) {\
    return name##MatcherP33<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type, p31##_type, p32##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
        p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
        p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type>\
  template <typename arg_type>\
  bool name##MatcherP33<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, \
      p32##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P34(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, p31, p32, p33, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type>\
  class name##MatcherP34 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30, p31##_type gmock_p31, p32##_type gmock_p32, \
          p33##_type gmock_p33)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), \
               p33(gmock_p33) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
      p31##_type p31;\
      p32##_type p32;\
      p33##_type p33;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type, p31##_type, p32##_type, \
                    p33##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
                    p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
                    p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, \
                    p33)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33));\
    }\
    name##MatcherP34(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30, p31##_type gmock_p31, \
        p32##_type gmock_p32, p33##_type gmock_p33) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12), p13(gmock_p13), \
        p14(gmock_p14), p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
        p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), p21(gmock_p21), \
        p22(gmock_p22), p23(gmock_p23), p24(gmock_p24), p25(gmock_p25), \
        p26(gmock_p26), p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
        p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), p33(gmock_p33) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
    p31##_type p31;\
    p32##_type p32;\
    p33##_type p33;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP34);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type>\
  inline name##MatcherP34<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, \
      p33##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26, p27##_type p27, \
      p28##_type p28, p29##_type p29, p30##_type p30, p31##_type p31, \
      p32##_type p32, p33##_type p33) {\
    return name##MatcherP34<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type, p31##_type, p32##_type, p33##_type>(p0, p1, p2, p3, p4, \
        p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, \
        p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, \
        p33);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type>\
  template <typename arg_type>\
  bool name##MatcherP34<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, \
      p33##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P35(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, p31, p32, p33, p34, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type>\
  class name##MatcherP35 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30, p31##_type gmock_p31, p32##_type gmock_p32, \
          p33##_type gmock_p33, p34##_type gmock_p34)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), \
               p33(gmock_p33), p34(gmock_p34) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
      p31##_type p31;\
      p32##_type p32;\
      p33##_type p33;\
      p34##_type p34;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type, p31##_type, p32##_type, \
                    p33##_type, p34##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
                    p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, \
                    p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, \
                    p31, p32, p33, p34)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, \
              p34));\
    }\
    name##MatcherP35(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30, p31##_type gmock_p31, \
        p32##_type gmock_p32, p33##_type gmock_p33, \
        p34##_type gmock_p34) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), p27(gmock_p27), \
        p28(gmock_p28), p29(gmock_p29), p30(gmock_p30), p31(gmock_p31), \
        p32(gmock_p32), p33(gmock_p33), p34(gmock_p34) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
    p31##_type p31;\
    p32##_type p32;\
    p33##_type p33;\
    p34##_type p34;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP35);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type>\
  inline name##MatcherP35<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26, p27##_type p27, \
      p28##_type p28, p29##_type p29, p30##_type p30, p31##_type p31, \
      p32##_type p32, p33##_type p33, p34##_type p34) {\
    return name##MatcherP35<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type, p31##_type, p32##_type, p33##_type, p34##_type>(p0, p1, \
        p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
        p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, \
        p31, p32, p33, p34);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type>\
  template <typename arg_type>\
  bool name##MatcherP35<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P36(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type>\
  class name##MatcherP36 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30, p31##_type gmock_p31, p32##_type gmock_p32, \
          p33##_type gmock_p33, p34##_type gmock_p34, p35##_type gmock_p35)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), \
               p33(gmock_p33), p34(gmock_p34), p35(gmock_p35) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
      p31##_type p31;\
      p32##_type p32;\
      p33##_type p33;\
      p34##_type p34;\
      p35##_type p35;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type, p31##_type, p32##_type, \
                    p33##_type, p34##_type, p35##_type>(p0, p1, p2, p3, p4, \
                    p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
                    p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, \
                    p28, p29, p30, p31, p32, p33, p34, p35)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, \
              p34, p35));\
    }\
    name##MatcherP36(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30, p31##_type gmock_p31, \
        p32##_type gmock_p32, p33##_type gmock_p33, p34##_type gmock_p34, \
        p35##_type gmock_p35) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), p27(gmock_p27), \
        p28(gmock_p28), p29(gmock_p29), p30(gmock_p30), p31(gmock_p31), \
        p32(gmock_p32), p33(gmock_p33), p34(gmock_p34), p35(gmock_p35) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
    p31##_type p31;\
    p32##_type p32;\
    p33##_type p33;\
    p34##_type p34;\
    p35##_type p35;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP36);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type>\
  inline name##MatcherP36<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26, p27##_type p27, \
      p28##_type p28, p29##_type p29, p30##_type p30, p31##_type p31, \
      p32##_type p32, p33##_type p33, p34##_type p34, p35##_type p35) {\
    return name##MatcherP36<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type, p31##_type, p32##_type, p33##_type, p34##_type, \
        p35##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, \
        p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, \
        p27, p28, p29, p30, p31, p32, p33, p34, p35);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type>\
  template <typename arg_type>\
  bool name##MatcherP36<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P37(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type>\
  class name##MatcherP37 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30, p31##_type gmock_p31, p32##_type gmock_p32, \
          p33##_type gmock_p33, p34##_type gmock_p34, p35##_type gmock_p35, \
          p36##_type gmock_p36)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), \
               p33(gmock_p33), p34(gmock_p34), p35(gmock_p35), \
               p36(gmock_p36) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
      p31##_type p31;\
      p32##_type p32;\
      p33##_type p33;\
      p34##_type p34;\
      p35##_type p35;\
      p36##_type p36;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type, p31##_type, p32##_type, \
                    p33##_type, p34##_type, p35##_type, p36##_type>(p0, p1, \
                    p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, \
                    p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
                    p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36))); \
                    \
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, \
              p34, p35, p36));\
    }\
    name##MatcherP37(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30, p31##_type gmock_p31, \
        p32##_type gmock_p32, p33##_type gmock_p33, p34##_type gmock_p34, \
        p35##_type gmock_p35, p36##_type gmock_p36) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12), p13(gmock_p13), \
        p14(gmock_p14), p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
        p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), p21(gmock_p21), \
        p22(gmock_p22), p23(gmock_p23), p24(gmock_p24), p25(gmock_p25), \
        p26(gmock_p26), p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
        p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), p33(gmock_p33), \
        p34(gmock_p34), p35(gmock_p35), p36(gmock_p36) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
    p31##_type p31;\
    p32##_type p32;\
    p33##_type p33;\
    p34##_type p34;\
    p35##_type p35;\
    p36##_type p36;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP37);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type>\
  inline name##MatcherP37<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type, p36##_type> name(p0##_type p0, p1##_type p1, \
      p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, \
      p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12, p13##_type p13, p14##_type p14, \
      p15##_type p15, p16##_type p16, p17##_type p17, p18##_type p18, \
      p19##_type p19, p20##_type p20, p21##_type p21, p22##_type p22, \
      p23##_type p23, p24##_type p24, p25##_type p25, p26##_type p26, \
      p27##_type p27, p28##_type p28, p29##_type p29, p30##_type p30, \
      p31##_type p31, p32##_type p32, p33##_type p33, p34##_type p34, \
      p35##_type p35, p36##_type p36) {\
    return name##MatcherP37<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type, p31##_type, p32##_type, p33##_type, p34##_type, \
        p35##_type, p36##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
        p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, \
        p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type>\
  template <typename arg_type>\
  bool name##MatcherP37<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type, \
      p36##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P38(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type, typename p37##_type>\
  class name##MatcherP38 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30, p31##_type gmock_p31, p32##_type gmock_p32, \
          p33##_type gmock_p33, p34##_type gmock_p34, p35##_type gmock_p35, \
          p36##_type gmock_p36, p37##_type gmock_p37)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), \
               p33(gmock_p33), p34(gmock_p34), p35(gmock_p35), \
               p36(gmock_p36), p37(gmock_p37) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
      p31##_type p31;\
      p32##_type p32;\
      p33##_type p33;\
      p34##_type p34;\
      p35##_type p35;\
      p36##_type p36;\
      p37##_type p37;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type, p31##_type, p32##_type, \
                    p33##_type, p34##_type, p35##_type, p36##_type, \
                    p37##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, \
                    p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
                    p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, \
                    p33, p34, p35, p36, p37)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, \
              p34, p35, p36, p37));\
    }\
    name##MatcherP38(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30, p31##_type gmock_p31, \
        p32##_type gmock_p32, p33##_type gmock_p33, p34##_type gmock_p34, \
        p35##_type gmock_p35, p36##_type gmock_p36, \
        p37##_type gmock_p37) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), p27(gmock_p27), \
        p28(gmock_p28), p29(gmock_p29), p30(gmock_p30), p31(gmock_p31), \
        p32(gmock_p32), p33(gmock_p33), p34(gmock_p34), p35(gmock_p35), \
        p36(gmock_p36), p37(gmock_p37) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
    p31##_type p31;\
    p32##_type p32;\
    p33##_type p33;\
    p34##_type p34;\
    p35##_type p35;\
    p36##_type p36;\
    p37##_type p37;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP38);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type, typename p37##_type>\
  inline name##MatcherP38<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type, p36##_type, p37##_type> name(p0##_type p0, \
      p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \
      p6##_type p6, p7##_type p7, p8##_type p8, p9##_type p9, p10##_type p10, \
      p11##_type p11, p12##_type p12, p13##_type p13, p14##_type p14, \
      p15##_type p15, p16##_type p16, p17##_type p17, p18##_type p18, \
      p19##_type p19, p20##_type p20, p21##_type p21, p22##_type p22, \
      p23##_type p23, p24##_type p24, p25##_type p25, p26##_type p26, \
      p27##_type p27, p28##_type p28, p29##_type p29, p30##_type p30, \
      p31##_type p31, p32##_type p32, p33##_type p33, p34##_type p34, \
      p35##_type p35, p36##_type p36, p37##_type p37) {\
    return name##MatcherP38<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type, p31##_type, p32##_type, p33##_type, p34##_type, \
        p35##_type, p36##_type, p37##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
        p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
        p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, \
        p36, p37);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type, typename p37##_type>\
  template <typename arg_type>\
  bool name##MatcherP38<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type, p36##_type, \
      p37##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P39(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, \
    description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type, typename p37##_type, typename p38##_type>\
  class name##MatcherP39 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30, p31##_type gmock_p31, p32##_type gmock_p32, \
          p33##_type gmock_p33, p34##_type gmock_p34, p35##_type gmock_p35, \
          p36##_type gmock_p36, p37##_type gmock_p37, p38##_type gmock_p38)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), \
               p33(gmock_p33), p34(gmock_p34), p35(gmock_p35), \
               p36(gmock_p36), p37(gmock_p37), p38(gmock_p38) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
      p31##_type p31;\
      p32##_type p32;\
      p33##_type p33;\
      p34##_type p34;\
      p35##_type p35;\
      p36##_type p36;\
      p37##_type p37;\
      p38##_type p38;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type, p31##_type, p32##_type, \
                    p33##_type, p34##_type, p35##_type, p36##_type, \
                    p37##_type, p38##_type>(p0, p1, p2, p3, p4, p5, p6, p7, \
                    p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, \
                    p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, \
                    p31, p32, p33, p34, p35, p36, p37, p38)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, \
              p34, p35, p36, p37, p38));\
    }\
    name##MatcherP39(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30, p31##_type gmock_p31, \
        p32##_type gmock_p32, p33##_type gmock_p33, p34##_type gmock_p34, \
        p35##_type gmock_p35, p36##_type gmock_p36, p37##_type gmock_p37, \
        p38##_type gmock_p38) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \
        p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
        p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
        p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), p15(gmock_p15), \
        p16(gmock_p16), p17(gmock_p17), p18(gmock_p18), p19(gmock_p19), \
        p20(gmock_p20), p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
        p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), p27(gmock_p27), \
        p28(gmock_p28), p29(gmock_p29), p30(gmock_p30), p31(gmock_p31), \
        p32(gmock_p32), p33(gmock_p33), p34(gmock_p34), p35(gmock_p35), \
        p36(gmock_p36), p37(gmock_p37), p38(gmock_p38) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
    p31##_type p31;\
    p32##_type p32;\
    p33##_type p33;\
    p34##_type p34;\
    p35##_type p35;\
    p36##_type p36;\
    p37##_type p37;\
    p38##_type p38;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP39);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type, typename p37##_type, typename p38##_type>\
  inline name##MatcherP39<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type, p36##_type, p37##_type, \
      p38##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26, p27##_type p27, \
      p28##_type p28, p29##_type p29, p30##_type p30, p31##_type p31, \
      p32##_type p32, p33##_type p33, p34##_type p34, p35##_type p35, \
      p36##_type p36, p37##_type p37, p38##_type p38) {\
    return name##MatcherP39<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type, p31##_type, p32##_type, p33##_type, p34##_type, \
        p35##_type, p36##_type, p37##_type, p38##_type>(p0, p1, p2, p3, p4, \
        p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, \
        p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, \
        p34, p35, p36, p37, p38);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type, typename p37##_type, typename p38##_type>\
  template <typename arg_type>\
  bool name##MatcherP39<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type, p36##_type, p37##_type, \
      p38##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#define MATCHER_P40(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, \
    p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, \
    p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, \
    description)\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type, typename p37##_type, typename p38##_type, \
      typename p39##_type>\
  class name##MatcherP40 {\
   public:\
    template <typename arg_type>\
    class gmock_Impl : public ::testing::MatcherInterface<arg_type> {\
     public:\
      gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \
          p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \
          p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \
          p9##_type gmock_p9, p10##_type gmock_p10, p11##_type gmock_p11, \
          p12##_type gmock_p12, p13##_type gmock_p13, p14##_type gmock_p14, \
          p15##_type gmock_p15, p16##_type gmock_p16, p17##_type gmock_p17, \
          p18##_type gmock_p18, p19##_type gmock_p19, p20##_type gmock_p20, \
          p21##_type gmock_p21, p22##_type gmock_p22, p23##_type gmock_p23, \
          p24##_type gmock_p24, p25##_type gmock_p25, p26##_type gmock_p26, \
          p27##_type gmock_p27, p28##_type gmock_p28, p29##_type gmock_p29, \
          p30##_type gmock_p30, p31##_type gmock_p31, p32##_type gmock_p32, \
          p33##_type gmock_p33, p34##_type gmock_p34, p35##_type gmock_p35, \
          p36##_type gmock_p36, p37##_type gmock_p37, p38##_type gmock_p38, \
          p39##_type gmock_p39)\
           : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), \
               p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \
               p8(gmock_p8), p9(gmock_p9), p10(gmock_p10), p11(gmock_p11), \
               p12(gmock_p12), p13(gmock_p13), p14(gmock_p14), \
               p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
               p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), \
               p21(gmock_p21), p22(gmock_p22), p23(gmock_p23), \
               p24(gmock_p24), p25(gmock_p25), p26(gmock_p26), \
               p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
               p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), \
               p33(gmock_p33), p34(gmock_p34), p35(gmock_p35), \
               p36(gmock_p36), p37(gmock_p37), p38(gmock_p38), \
               p39(gmock_p39) {}\
      virtual bool MatchAndExplain(\
          arg_type arg, ::testing::MatchResultListener* result_listener) const;\
      virtual void DescribeTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(false);\
      }\
      virtual void DescribeNegationTo(::std::ostream* gmock_os) const {\
        *gmock_os << FormatDescription(true);\
      }\
      p0##_type p0;\
      p1##_type p1;\
      p2##_type p2;\
      p3##_type p3;\
      p4##_type p4;\
      p5##_type p5;\
      p6##_type p6;\
      p7##_type p7;\
      p8##_type p8;\
      p9##_type p9;\
      p10##_type p10;\
      p11##_type p11;\
      p12##_type p12;\
      p13##_type p13;\
      p14##_type p14;\
      p15##_type p15;\
      p16##_type p16;\
      p17##_type p17;\
      p18##_type p18;\
      p19##_type p19;\
      p20##_type p20;\
      p21##_type p21;\
      p22##_type p22;\
      p23##_type p23;\
      p24##_type p24;\
      p25##_type p25;\
      p26##_type p26;\
      p27##_type p27;\
      p28##_type p28;\
      p29##_type p29;\
      p30##_type p30;\
      p31##_type p31;\
      p32##_type p32;\
      p33##_type p33;\
      p34##_type p34;\
      p35##_type p35;\
      p36##_type p36;\
      p37##_type p37;\
      p38##_type p38;\
      p39##_type p39;\
     private:\
      ::testing::internal::string FormatDescription(bool negation) const {\
        const ::testing::internal::string gmock_description = (description);\
        if (!gmock_description.empty())\
          return gmock_description;\
        return ::testing::internal::FormatMatcherDescription(\
            negation, #name, \
            ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\
                ::testing::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \
                    p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \
                    p9##_type, p10##_type, p11##_type, p12##_type, \
                    p13##_type, p14##_type, p15##_type, p16##_type, \
                    p17##_type, p18##_type, p19##_type, p20##_type, \
                    p21##_type, p22##_type, p23##_type, p24##_type, \
                    p25##_type, p26##_type, p27##_type, p28##_type, \
                    p29##_type, p30##_type, p31##_type, p32##_type, \
                    p33##_type, p34##_type, p35##_type, p36##_type, \
                    p37##_type, p38##_type, p39##_type>(p0, p1, p2, p3, p4, \
                    p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
                    p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, \
                    p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, \
                    p39)));\
      }\
      GTEST_DISALLOW_ASSIGN_(gmock_Impl);\
    };\
    template <typename arg_type>\
    operator ::testing::Matcher<arg_type>() const {\
      return ::testing::Matcher<arg_type>(\
          new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \
              p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, \
              p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, \
              p34, p35, p36, p37, p38, p39));\
    }\
    name##MatcherP40(p0##_type gmock_p0, p1##_type gmock_p1, \
        p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \
        p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \
        p8##_type gmock_p8, p9##_type gmock_p9, p10##_type gmock_p10, \
        p11##_type gmock_p11, p12##_type gmock_p12, p13##_type gmock_p13, \
        p14##_type gmock_p14, p15##_type gmock_p15, p16##_type gmock_p16, \
        p17##_type gmock_p17, p18##_type gmock_p18, p19##_type gmock_p19, \
        p20##_type gmock_p20, p21##_type gmock_p21, p22##_type gmock_p22, \
        p23##_type gmock_p23, p24##_type gmock_p24, p25##_type gmock_p25, \
        p26##_type gmock_p26, p27##_type gmock_p27, p28##_type gmock_p28, \
        p29##_type gmock_p29, p30##_type gmock_p30, p31##_type gmock_p31, \
        p32##_type gmock_p32, p33##_type gmock_p33, p34##_type gmock_p34, \
        p35##_type gmock_p35, p36##_type gmock_p36, p37##_type gmock_p37, \
        p38##_type gmock_p38, p39##_type gmock_p39) : p0(gmock_p0), \
        p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \
        p6(gmock_p6), p7(gmock_p7), p8(gmock_p8), p9(gmock_p9), \
        p10(gmock_p10), p11(gmock_p11), p12(gmock_p12), p13(gmock_p13), \
        p14(gmock_p14), p15(gmock_p15), p16(gmock_p16), p17(gmock_p17), \
        p18(gmock_p18), p19(gmock_p19), p20(gmock_p20), p21(gmock_p21), \
        p22(gmock_p22), p23(gmock_p23), p24(gmock_p24), p25(gmock_p25), \
        p26(gmock_p26), p27(gmock_p27), p28(gmock_p28), p29(gmock_p29), \
        p30(gmock_p30), p31(gmock_p31), p32(gmock_p32), p33(gmock_p33), \
        p34(gmock_p34), p35(gmock_p35), p36(gmock_p36), p37(gmock_p37), \
        p38(gmock_p38), p39(gmock_p39) {\
    }\
    p0##_type p0;\
    p1##_type p1;\
    p2##_type p2;\
    p3##_type p3;\
    p4##_type p4;\
    p5##_type p5;\
    p6##_type p6;\
    p7##_type p7;\
    p8##_type p8;\
    p9##_type p9;\
    p10##_type p10;\
    p11##_type p11;\
    p12##_type p12;\
    p13##_type p13;\
    p14##_type p14;\
    p15##_type p15;\
    p16##_type p16;\
    p17##_type p17;\
    p18##_type p18;\
    p19##_type p19;\
    p20##_type p20;\
    p21##_type p21;\
    p22##_type p22;\
    p23##_type p23;\
    p24##_type p24;\
    p25##_type p25;\
    p26##_type p26;\
    p27##_type p27;\
    p28##_type p28;\
    p29##_type p29;\
    p30##_type p30;\
    p31##_type p31;\
    p32##_type p32;\
    p33##_type p33;\
    p34##_type p34;\
    p35##_type p35;\
    p36##_type p36;\
    p37##_type p37;\
    p38##_type p38;\
    p39##_type p39;\
   private:\
    GTEST_DISALLOW_ASSIGN_(name##MatcherP40);\
  };\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type, typename p37##_type, typename p38##_type, \
      typename p39##_type>\
  inline name##MatcherP40<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type, p36##_type, p37##_type, p38##_type, \
      p39##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \
      p3##_type p3, p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \
      p8##_type p8, p9##_type p9, p10##_type p10, p11##_type p11, \
      p12##_type p12, p13##_type p13, p14##_type p14, p15##_type p15, \
      p16##_type p16, p17##_type p17, p18##_type p18, p19##_type p19, \
      p20##_type p20, p21##_type p21, p22##_type p22, p23##_type p23, \
      p24##_type p24, p25##_type p25, p26##_type p26, p27##_type p27, \
      p28##_type p28, p29##_type p29, p30##_type p30, p31##_type p31, \
      p32##_type p32, p33##_type p33, p34##_type p34, p35##_type p35, \
      p36##_type p36, p37##_type p37, p38##_type p38, p39##_type p39) {\
    return name##MatcherP40<p0##_type, p1##_type, p2##_type, p3##_type, \
        p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
        p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, \
        p15##_type, p16##_type, p17##_type, p18##_type, p19##_type, \
        p20##_type, p21##_type, p22##_type, p23##_type, p24##_type, \
        p25##_type, p26##_type, p27##_type, p28##_type, p29##_type, \
        p30##_type, p31##_type, p32##_type, p33##_type, p34##_type, \
        p35##_type, p36##_type, p37##_type, p38##_type, p39##_type>(p0, p1, \
        p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, \
        p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, \
        p31, p32, p33, p34, p35, p36, p37, p38, p39);\
  }\
  template <typename p0##_type, typename p1##_type, typename p2##_type, \
      typename p3##_type, typename p4##_type, typename p5##_type, \
      typename p6##_type, typename p7##_type, typename p8##_type, \
      typename p9##_type, typename p10##_type, typename p11##_type, \
      typename p12##_type, typename p13##_type, typename p14##_type, \
      typename p15##_type, typename p16##_type, typename p17##_type, \
      typename p18##_type, typename p19##_type, typename p20##_type, \
      typename p21##_type, typename p22##_type, typename p23##_type, \
      typename p24##_type, typename p25##_type, typename p26##_type, \
      typename p27##_type, typename p28##_type, typename p29##_type, \
      typename p30##_type, typename p31##_type, typename p32##_type, \
      typename p33##_type, typename p34##_type, typename p35##_type, \
      typename p36##_type, typename p37##_type, typename p38##_type, \
      typename p39##_type>\
  template <typename arg_type>\
  bool name##MatcherP40<p0##_type, p1##_type, p2##_type, p3##_type, \
      p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type, \
      p10##_type, p11##_type, p12##_type, p13##_type, p14##_type, p15##_type, \
      p16##_type, p17##_type, p18##_type, p19##_type, p20##_type, p21##_type, \
      p22##_type, p23##_type, p24##_type, p25##_type, p26##_type, p27##_type, \
      p28##_type, p29##_type, p30##_type, p31##_type, p32##_type, p33##_type, \
      p34##_type, p35##_type, p36##_type, p37##_type, p38##_type, \
      p39##_type>::gmock_Impl<arg_type>::MatchAndExplain(\
      arg_type arg, \
      ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\
          const

#endif  // GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_MATCHERS_H_
